{"version":3,"file":"simple-icon-picker.umd.js","sources":["simple-icon-picker.umd.js"],"sourcesContent":["/**\n * Copyright 2019 Penn State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, css } from \"lit-element/lit-element.js\";\nimport { SimplePicker } from \"@lrnwebcomponents/simple-picker/simple-picker.js\";\nimport { IronMeta } from \"@polymer/iron-meta/iron-meta.js\";\n\n/**\n * `simple-icon-picker`\n * @element simple-icon-picker\n * Uses simple-picker to create an icon picker\n *\n\n * @demo ./demo/index.html\n */\nclass SimpleIconPicker extends SimplePicker {\n  //styles function\n  static get styles() {\n    return [\n      ...super.styles,\n      css`\n        :host(simple-icon-picker) #collapse {\n          width: 300px;\n        }\n        :host(simple-icon-picker) .row {\n          justify-content: flex-start;\n        }\n        :host(simple-icon-picker) simple-picker-option {\n          flex: 0 0 auto;\n        }\n      `\n    ];\n  }\n\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n      ...super.properties,\n\n      /**\n       * Allow a null option to be selected?\n       */\n      allowNull: {\n        name: \"allowNull\",\n        type: Boolean\n      },\n      /**\n        * An array of icons by name: ```\n    [\n      \"editor:format-paint\",\n      \"content-copy\",\n      \"av:volume-off\"\n      \n    ]```\n      */\n      icons: {\n        name: \"icons\",\n        type: Array\n      },\n\n      /**\n       * The value of the option.\n       */\n      value: {\n        name: \"value\",\n        type: String,\n        reflect: true\n      },\n\n      /**\n       * the maximum number of options per row\n       */\n      optionsPerRow: {\n        name: \"optionsPerRow\",\n        type: Number\n      },\n\n      /**\n        * An array of icons by name: ```\n    [\n      \"editor:format-paint\",\n      \"content-copy\",\n      \"av:volume-off\"\n      \n    ]```\n      */\n\n      __iconList: {\n        name: \"__iconList\",\n        type: Array\n      }\n    };\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"simple-icon-picker\";\n  }\n  constructor() {\n    super();\n    this.hideOptionLabels = true;\n    this.allowNull = false;\n    this.icons = [];\n    this.value = null;\n    this.options = [];\n    this.optionsPerRow = 10;\n  }\n  /**\n   * LitElement life cycle - property changed callback\n   */\n  updated(changedProperties) {\n    if (super.updated) {\n      super.updated(changedProperties);\n    }\n    changedProperties.forEach((oldValue, propName) => {\n      if (\n        [\"optionsPerRow\", \"icons\", \"allowNull\", \"__iconList\"].includes(propName)\n      ) {\n        this._getOptions(this[propName], oldValue);\n      }\n      if (propName == \"value\") {\n        /**\n         * fires when value changes\n         * @event value-changed\n         */\n        this.dispatchEvent(\n          new CustomEvent(\"value-changed\", {\n            detail: {\n              value: this[propName]\n            }\n          })\n        );\n      }\n    });\n  }\n  /**\n   * LitElement life cycle - ready callback\n   */\n  firstUpdated(changedProperties) {\n    if (super.firstUpdated) {\n      super.firstUpdated(changedProperties);\n    }\n    const iconSets = new IronMeta({ type: \"iconset\" });\n    if (\n      this.icons.length === 0 &&\n      typeof iconSets !== typeof undefined &&\n      iconSets.list &&\n      iconSets.list.length\n    ) {\n      var iconList = [];\n      iconSets.list.forEach(function(item) {\n        item.getIconNames().forEach(icon => {\n          iconList.push(icon);\n        });\n      });\n      this.__iconList = iconList;\n      this._setSelectedOption();\n    }\n  }\n\n  /**\n   * gets a list of icons and load them in a format\n   * that the simple-picker can take;\n   * if no icons are provided, loads a list from iron-meta\n   *\n   * @param {array} a list of custom icons for the picker\n   * @param {array} default list of icons for the picker\n   * @param {boolean} allow a null value for the picker\n   *\n   */\n  _getOptions() {\n    let icons =\n        typeof this.icons === \"string\" ? JSON.parse(this.icons) : this.icons,\n      collapse = this.shadowRoot.querySelector(\"#collapse\"),\n      cols = this.optionsPerRow;\n    if (icons.length === 0 && this.__iconList && this.__iconList.length > 0)\n      icons = this.__iconList;\n    let options =\n        this.allowNull === false ? [] : [[{ alt: \"null\", value: null }]],\n      h = this.allowNull === false ? 0 : 1;\n    cols =\n      Math.sqrt(icons.length + h) <= this.optionsPerRow\n        ? Math.ceil(Math.sqrt(icons.length + h))\n        : this.optionsPerRow;\n    for (let i = 0; i < icons.length; i++) {\n      let j = h + i,\n        row = Math.floor(j / cols),\n        col = j - row * cols;\n      if (options[row] === undefined || options[row] === null)\n        options[row] = [];\n      options[row][col] = {\n        alt: icons[i],\n        icon: icons[i],\n        value: icons[i]\n      };\n    }\n    this.options = options;\n  }\n  /**\n   * Don't set the selection option until there are options rendered\n   */\n  _setSelectedOption() {\n    if (this.options.length > 1) super._setSelectedOption();\n  }\n}\nwindow.customElements.define(SimpleIconPicker.tag, SimpleIconPicker);\nexport { SimpleIconPicker };\n"],"names":["SimpleIconPicker","hideOptionLabels","allowNull","icons","value","options","optionsPerRow","SimplePicker","css","name","type","Boolean","Array","String","reflect","Number","__iconList","changedProperties","forEach","oldValue","propName","includes","_this2","_getOptions","dispatchEvent","CustomEvent","detail","iconSets","IronMeta","this","length","_typeof","list","iconList","item","getIconNames","icon","push","_setSelectedOption","JSON","parse","cols","shadowRoot","querySelector","alt","h","Math","sqrt","ceil","i","j","row","floor","col","undefined","_get","window","customElements","define","tag"],"mappings":"4uFAgBMA,yKAwFGC,kBAAmB,IACnBC,WAAY,IACZC,MAAQ,KACRC,MAAQ,OACRC,QAAU,KACVC,cAAgB,iPA7FMC,iGAKzBC,ibAsBAN,UAAW,CACTO,KAAM,YACNC,KAAMC,SAWRR,MAAO,CACLM,KAAM,QACNC,KAAME,OAMRR,MAAO,CACLK,KAAM,QACNC,KAAMG,OACNC,SAAS,GAMXR,cAAe,CACbG,KAAM,gBACNC,KAAMK,QAaRC,WAAY,CACVP,KAAM,aACNC,KAAME,2CAUH,4DAcDK,2FAEUA,GAEhBA,EAAkBC,QAAQ,SAACC,EAAUC,GAEjC,CAAC,gBAAiB,QAAS,YAAa,cAAcC,SAASD,IAE/DE,EAAKC,YAAYD,EAAKF,GAAWD,GAEnB,SAAZC,GAKFE,EAAKE,cACH,IAAIC,YAAY,gBAAiB,CAC/BC,OAAQ,CACNtB,MAAOkB,EAAKF,8CAUXH,0FAEUA,OAEfU,EAAW,IAAIC,WAAS,CAAElB,KAAM,eAEd,IAAtBmB,KAAK1B,MAAM2B,sBACXC,EAAOJ,IACPA,EAASK,MACTL,EAASK,KAAKF,OACd,KACIG,EAAW,GACfN,EAASK,KAAKd,QAAQ,SAASgB,GAC7BA,EAAKC,eAAejB,QAAQ,SAAAkB,GAC1BH,EAASI,KAAKD,YAGbpB,WAAaiB,OACbK,gEAeHnC,EACsB,iBAAf0B,KAAK1B,MAAqBoC,KAAKC,MAAMX,KAAK1B,OAAS0B,KAAK1B,MAEjEsC,GADWZ,KAAKa,WAAWC,cAAc,aAClCd,KAAKvB,eACO,IAAjBH,EAAM2B,QAAgBD,KAAKb,YAAca,KAAKb,WAAWc,OAAS,IACpE3B,EAAQ0B,KAAKb,gBACXX,GACmB,IAAnBwB,KAAK3B,UAAsB,GAAK,CAAC,CAAC,CAAE0C,IAAK,OAAQxC,MAAO,QAC1DyC,GAAuB,IAAnBhB,KAAK3B,UAAsB,EAAI,EACrCuC,EACEK,KAAKC,KAAK5C,EAAM2B,OAASe,IAAMhB,KAAKvB,cAChCwC,KAAKE,KAAKF,KAAKC,KAAK5C,EAAM2B,OAASe,IACnChB,KAAKvB,kBACN,IAAI2C,EAAI,EAAGA,EAAI9C,EAAM2B,OAAQmB,IAAK,KACjCC,EAAIL,EAAII,EACVE,EAAML,KAAKM,MAAMF,EAAIT,GACrBY,EAAMH,EAAIC,EAAMV,OACGa,IAAjBjD,EAAQ8C,IAAuC,OAAjB9C,EAAQ8C,KACxC9C,EAAQ8C,GAAO,IACjB9C,EAAQ8C,GAAKE,GAAO,CAClBT,IAAKzC,EAAM8C,GACXb,KAAMjC,EAAM8C,GACZ7C,MAAOD,EAAM8C,SAGZ5C,QAAUA,+CAMXwB,KAAKxB,QAAQyB,OAAS,GAAGyB,gEAGjCC,OAAOC,eAAeC,OAAO1D,EAAiB2D,IAAK3D"}