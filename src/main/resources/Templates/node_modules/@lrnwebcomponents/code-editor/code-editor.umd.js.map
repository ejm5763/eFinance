{"version":3,"file":"code-editor.umd.js","sources":["code-editor.umd.js"],"sourcesContent":["/**\n * Copyright 2019 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { LitElement, html, css } from \"lit-element/lit-element.js\";\nimport { SchemaBehaviors } from \"@lrnwebcomponents/schema-behaviors/schema-behaviors.js\";\n/**\n * `code-editor`\n * `Wrapper on top of a code editor`\n *\n * @demo demo/index.html\n * @microcopy - the mental model for this element\n * - monaco is the VS code editor\n * @element code-editor\n */\nclass CodeEditor extends SchemaBehaviors(LitElement) {\n  /**\n   * LitElement constructable styles enhancement\n   */\n  static get styles() {\n    return [\n      css`\n        :host {\n          display: block;\n          font-family: unset;\n          margin: var(--code-pen-margin, 16px 0);\n        }\n        :host([hidden]) {\n          display: none !important;\n        }\n        .code-pen-container:not([hidden]) {\n          width: 100%;\n          display: flex;\n          background-color: var(--code-pen-button-color, #222222);\n          color: white;\n          height: 40px;\n          justify-content: flex-end;\n          align-items: center;\n        }\n        .code-pen-container span {\n          display: inline-flex;\n          line-height: 16px;\n          font-size: 16px;\n          padding: 12px;\n        }\n        code-pen-button {\n          float: right;\n          height: 40px;\n        }\n        label {\n          color: var(--code-editor-label-color, #888);\n          transition: all 0.5s;\n        }\n\n        :host([focused]) label {\n          color: var(\n            --code-editor-float-label-active-color,\n            var(--code-editor-label-color, #000)\n          );\n        }\n\n        #codeeditor {\n          height: 100%;\n          display: flex;\n          border: var(--code-editor-code-border);\n          border-radius: var(--code-editor-code-border-radius);\n        }\n\n        :host([focused]) #codeeditor {\n          border: var(--code-editor-focus-code-border);\n        }\n      `\n    ];\n  }\n  /**\n   * HTMLElement\n   */\n  constructor() {\n    super();\n    this.showCodePen = false;\n    this.readOnly = false;\n    this.theme = \"vs-dark\";\n    this.language = \"javascript\";\n    this.fontSize = 16;\n    this.tabSize = 2;\n    this.autofocus = false;\n    this.hideLineNumbers = false;\n    this.focused = false;\n    this.__libPath =\n      decodeURIComponent(import.meta.url) + \"/../../../monaco-editor/min/vs\";\n    import(\"@lrnwebcomponents/code-editor/lib/monaco-element/monaco-element.js\");\n    import(\"@lrnwebcomponents/code-editor/lib/code-pen-button.js\");\n    setTimeout(() => {\n      this.addEventListener(\n        \"monaco-element-ready\",\n        this.editorReady.bind(this)\n      );\n    }, 0);\n  }\n  /**\n   * LitElement render\n   */\n  render() {\n    return html`\n      <label for=\"codeeditor\" ?hidden=\"${!this.title}\">${this.title}</label>\n      <monaco-element\n        id=\"codeeditor\"\n        ?autofocus=\"${this.autofocus}\"\n        ?hide-line-numbers=\"${this.hideLineNumbers}\"\n        lib-path=\"${this.__libPath}\"\n        language=\"${this.language}\"\n        tab-size=\"${this.tabSize}\"\n        theme=\"${this.theme}\"\n        @value-changed=\"${this._editorDataChanged}\"\n        font-size=\"${this.fontSize}\"\n        ?read-only=\"${this.readOnly}\"\n        @code-editor-focus=\"${this._handleFocus}\"\n        @code-editor-blur=\"${this._handleBlur}\"\n      >\n      </monaco-element>\n      <slot hidden></slot>\n      <div class=\"code-pen-container\" ?hidden=\"${!this.showCodePen}\">\n        <span>Check it out on code pen: </span\n        ><code-pen-button .data=\"${this.codePenData}\"></code-pen-button>\n      </div>\n    `;\n  }\n\n  static get tag() {\n    return \"code-editor\";\n  }\n\n  static get properties() {\n    return {\n      ...super.properties,\n      /**\n       * Title\n       */\n      title: {\n        type: String\n      },\n      /**\n       * Show codePen button to fork it to there to run\n       */\n      showCodePen: {\n        type: Boolean,\n        reflect: true,\n        attribute: \"show-code-pen\"\n      },\n      /**\n       * Readonly setting for the editor\n       */\n      readOnly: {\n        type: Boolean,\n        reflect: true,\n        attribute: \"read-only\"\n      },\n      /**\n       * Code pen data, computed based on the HTML editor\n       */\n      codePenData: {\n        type: Object,\n        attribute: \"code-pen-data\"\n      },\n      /**\n       * contents of the editor\n       */\n      editorValue: {\n        type: String,\n        attribute: \"editor-value\"\n      },\n      /**\n       * value of the editor after the fact\n       */\n      value: {\n        type: String\n      },\n      /**\n       * Theme for the Ace editor.\n       */\n      theme: {\n        type: String\n      },\n      /**\n       * Mode / language for editor\n       */\n      mode: {\n        type: String\n      },\n      /**\n       * Language to present color coding for\n       */\n      language: {\n        type: String\n      },\n      /**\n       * font size for the editor\n       */\n      fontSize: {\n        type: Number,\n        attribute: \"font-size\"\n      },\n      /**\n       * automatically set focus on the editor\n       */\n      autofocus: {\n        type: Boolean,\n        reflect: true\n      },\n      /**\n       * hide the line numbers\n       */\n      hideLineNumbers: {\n        type: Boolean,\n        attribute: \"hide-line-numbers\"\n      },\n      /**\n       * does the monaco-editor have focus\n       */\n      focused: {\n        type: Boolean,\n        reflect: true\n      },\n      /**\n       * number of characters for tabs\n       */\n      tabSize: {\n        type: Number,\n        attribute: \"tab-size\"\n      }\n    };\n  }\n  updated(changedProperties) {\n    changedProperties.forEach((oldValue, propName) => {\n      if (propName == \"editorValue\") {\n        this._editorValueChanged(this[propName], oldValue);\n      }\n      if (propName == \"mode\") {\n        this._modeChanged(this[propName], oldValue);\n      }\n      if (propName === \"showCodePen\") {\n        // notify\n        this.dispatchEvent(\n          new CustomEvent(\"show-code-pen-changed\", {\n            detail: {\n              value: this[propName]\n            }\n          })\n        );\n      }\n      if (propName === \"value\") {\n        // notify\n        this.dispatchEvent(\n          new CustomEvent(\"value-changed\", {\n            detail: {\n              value: this[propName]\n            }\n          })\n        );\n      }\n      if ([\"title\", \"value\"].includes(propName)) {\n        this.codePenData = this._computeCodePenData(this.title, this.value);\n      }\n    });\n  }\n  /**\n   * Update the post data whenever the editor has been updated\n   */\n  _computeCodePenData(title, editorValue) {\n    return {\n      title: title,\n      html: editorValue\n    };\n  }\n  /**\n   * sets focused attribute when monaco-elements's focus event fires\n   * @param {event} e the monaco-elements's focus event\n   */\n  _handleFocus(e) {\n    this.focused = true;\n  }\n  /**\n   * unsets focused attribute when monaco-elements's blur event fires\n   * @param {event} e the monaco-elements's blur event\n   */\n  _handleBlur(e) {\n    this.focused = false;\n  }\n  /**\n   * LEGACY: pass down mode to language if that api is used\n   */\n  _modeChanged(newValue) {\n    this.language = this.mode;\n  }\n\n  /**\n   * Notice code editor changes and reflect them into this element\n   */\n  _editorDataChanged(e) {\n    // value coming up off of thiss\n    this.value = e.detail;\n  }\n\n  /**\n   * Calculate what's in slot currently and then inject it into the editor.\n   */\n  updateEditorValue(node) {\n    if (node) {\n      var content = \"\";\n      var children = node;\n      if (node.tagName !== \"TEMPLATE\") {\n        console.warn(\n          \"code-editor works best with a template tag provided in light dom\"\n        );\n        children = this.childNodes;\n        if (children.length > 0) {\n          // loop through everything found in the slotted area and put it back in\n          for (var j = 0, len2 = children.length; j < len2; j++) {\n            if (typeof children[j].tagName !== typeof undefined) {\n              content += children[j].outerHTML;\n            } else {\n              content += children[j].textContent;\n            }\n          }\n        }\n      } else {\n        content = children.innerHTML;\n      }\n      if (content) {\n        this.shadowRoot.querySelector(\"#codeeditor\").value = content.trim();\n      }\n    }\n  }\n  _editorValueChanged(newValue) {\n    if (newValue) {\n      this.shadowRoot.querySelector(\"#codeeditor\").value = newValue;\n    }\n  }\n  /**\n   * Ensure fields don't pass through to HAX if in that context\n   */\n  preProcessHaxNodeToContent(node) {\n    node.editorValue = null;\n    node.codePenData = null;\n    node.value = null;\n    node.removeAttribute(\"value\");\n    node.removeAttribute(\"code-pen-data\");\n    return node;\n  }\n  /**\n   * attached life cycle\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    // mutation observer that ensures state of hax applied correctly\n    this._observer = new MutationObserver(mutations => {\n      mutations.forEach(mutation => {\n        if (mutation.addedNodes.length > 0) {\n          mutation.addedNodes.forEach(node => {\n            if (node.tagName) {\n              this.updateEditorValue(node);\n            }\n          });\n        }\n        // if we dropped nodes via the UI (delete event basically)\n        if (mutation.removedNodes.length > 0) {\n          // handle removing items... not sure we need to do anything here\n          mutation.removedNodes.forEach(node => {\n            if (node.tagName) {\n              this.updateEditorValue(node);\n            }\n          });\n        }\n      });\n    });\n  }\n  disconnectedCallback() {\n    if (this._observer) {\n      this._observer.disconnect();\n      this._observer = null;\n    }\n    super.disconnectedCallback();\n  }\n  editorReady(e) {\n    if (this.editorValue) {\n      this.shadowRoot.querySelector(\"#codeeditor\").value = this.editorValue;\n    } else {\n      this.childNodes.forEach(node => this.updateEditorValue(node));\n    }\n    this._observer.observe(this, {\n      childList: true\n    });\n  }\n}\nwindow.customElements.define(CodeEditor.tag, CodeEditor);\nexport { CodeEditor };\n"],"names":["CodeEditor","showCodePen","readOnly","theme","language","fontSize","tabSize","autofocus","hideLineNumbers","focused","__libPath","decodeURIComponent","setTimeout","addEventListener","_this","editorReady","bind","SchemaBehaviors","LitElement","css","html","this","title","_editorDataChanged","_handleFocus","_handleBlur","codePenData","changedProperties","forEach","oldValue","propName","_this2","_editorValueChanged","_modeChanged","dispatchEvent","CustomEvent","detail","value","includes","_computeCodePenData","editorValue","e","newValue","mode","node","content","children","tagName","console","warn","childNodes","length","j","len2","_typeof","outerHTML","textContent","innerHTML","shadowRoot","querySelector","trim","removeAttribute","_observer","MutationObserver","mutations","mutation","addedNodes","_this3","updateEditorValue","removedNodes","disconnect","_this4","observe","childList","type","String","Boolean","reflect","attribute","Object","Number","window","customElements","define","tag"],"mappings":"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"}