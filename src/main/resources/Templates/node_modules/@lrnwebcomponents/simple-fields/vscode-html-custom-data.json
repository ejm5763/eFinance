{
  "version": 1,
  "tags": [
    {
      "name": "simple-fields-array-item",
      "description": "`simple-fields-array-item`\nan accessible expand collapse\n\n### Styling\n\n`<simple-fields-array-item>` provides the following custom properties\nfor styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--simple-fields-array-item-margin` | margin around simple-fields-array-item | 15px 0\n`--simple-fields-array-item-border` | border around simple-fields-array-item | 1px solid\n`--simple-fields-array-item-horizontal-padding` | horizontal padding inside simple-fields-array-item | 16px\n`--simple-fields-array-item-horizontal-padding-left` | left padding inside simple-fields-array-item | `--simple-fields-array-item-horizontal-padding`\n`--simple-fields-array-item-horizontal-padding-right` | right padding inside simple-fields-array-item | `--simple-fields-array-item-horizontal-padding`\n`--simple-fields-array-item-vertical-padding` | vertical padding inside simple-fields-array-item | 16px\n`--simple-fields-array-item-horizontal-padding-top` | top padding inside simple-fields-array-item | `--simple-fields-array-item-vertical-padding`\n`--simple-fields-array-item-horizontal-padding-bottom` | bottom padding inside simple-fields-array-item | --simple-fields-array-item-vertical-padding\n`--simple-fields-array-item-border-between` | border between simple-fields-array-item heading and content | --simple-fields-array-item-border\n`--simple-fields-array-item-heading-font-weight` | font-weight for simple-fields-array-item heading | bold\n`--simple-fields-array-item-heading-color` | text color for simple-fields-array-item heading | unset\n`--simple-fields-array-item-heading-background-color` | background-color for simple-fields-array-item heading | unset\n\nEvents:\n\n  * `added` {`CustomEvent<this>`} - Fires when constructed, so that parent radio group can listen for it.\n\n  * `copy` {`CustomEvent<this>`} - \n\n  * `remove` {`CustomEvent<this>`} - \n\n  * `removed` {`CustomEvent<this>`} - Fires when detatched, so that parent radio group will no longer listen for it.\n\nAttributes:\n\n  * `expanded` {`boolean`} - is disabled?\n\n  * `preview` {`boolean`} - is disabled?\n\n  * `sortable` {`boolean`} - is disabled?\n\n  * `preview-by` {`any[]`} - fields to preview by\n\n  * `disabled` {`boolean`} - is disabled?\n\n  * `error` {`boolean`} - whether fieldset has fields with errors\n\n  * `hidden` {`boolean`} - whether the tabbed interface is hidden\n\n  * `readonly` {`boolean`} - whether the tabbed interface is hidden\n\n  * `label` {`string`} - fieldset legend\n\n  * `name` {`string`} - unique name\n\n  * `description` {`string`} - optional description\n\nProperties:\n\n  * `expanded` {`boolean`} - is disabled?\n\n  * `preview` {`boolean`} - is disabled?\n\n  * `slots` - \n\n  * `sortable` {`boolean`} - is disabled?\n\n  * `previewBy` {`any[]`} - fields to preview by\n\n  * `legend` {`TemplateResult`} - \n\n  * `desc` {`TemplateResult`} - \n\n  * `fields` {`TemplateResult`} - \n\n  * `disabled` {`boolean`} - is disabled?\n\n  * `error` {`boolean`} - whether fieldset has fields with errors\n\n  * `hidden` {`boolean`} - whether the tabbed interface is hidden\n\n  * `readonly` {`boolean`} - whether the tabbed interface is hidden\n\n  * `label` {`string`} - fieldset legend\n\n  * `name` {`string`} - unique name\n\n  * `description` {`string`} - optional description",
      "attributes": [
        {
          "name": "expanded",
          "description": "`expanded` {`boolean`} - is disabled?\n\nProperty: expanded",
          "valueSet": "v"
        },
        {
          "name": "preview",
          "description": "`preview` {`boolean`} - is disabled?\n\nProperty: preview",
          "valueSet": "v"
        },
        {
          "name": "sortable",
          "description": "`sortable` {`boolean`} - is disabled?\n\nProperty: sortable\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "preview-by",
          "description": "`preview-by` {`any[]`} - fields to preview by\n\nProperty: previewBy\n\nDefault: "
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - is disabled?\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "error",
          "description": "`error` {`boolean`} - whether fieldset has fields with errors\n\nProperty: error",
          "valueSet": "v"
        },
        {
          "name": "hidden",
          "description": "`hidden` {`boolean`} - whether the tabbed interface is hidden\n\nProperty: hidden",
          "valueSet": "v"
        },
        {
          "name": "readonly",
          "description": "`readonly` {`boolean`} - whether the tabbed interface is hidden\n\nProperty: readonly",
          "valueSet": "v"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - fieldset legend\n\nProperty: label"
        },
        {
          "name": "name",
          "description": "`name` {`string`} - unique name\n\nProperty: name"
        },
        {
          "name": "description",
          "description": "`description` {`string`} - optional description\n\nProperty: description"
        },
        {
          "name": "onadded",
          "description": "`added` {`CustomEvent<this>`} - Fires when constructed, so that parent radio group can listen for it."
        },
        {
          "name": "oncopy",
          "description": "`copy` {`CustomEvent<this>`} - "
        },
        {
          "name": "onremove",
          "description": "`remove` {`CustomEvent<this>`} - "
        },
        {
          "name": "onremoved",
          "description": "`removed` {`CustomEvent<this>`} - Fires when detatched, so that parent radio group will no longer listen for it."
        }
      ]
    },
    {
      "name": "simple-fields-array",
      "description": "`simple-fields-array` takes in a JSON schema of type array and builds a form,\nexposing a `value` property that represents an array described by the schema.\n\nEvents:\n\n  * `add` {`CustomEvent<this>`} - \n\n  * `remove` {`CustomEvent<any>`} - \n\n  * `toggle` {`CustomEvent<this>`} - Fires when toggled.\n\n  * `expand` {`CustomEvent<this>`} - Fires when expanded.\n\n  * `collapse` {`CustomEvent<this>`} - Fires when collapsed.\n\nAttributes:\n\n  * `count` {`number`} - \n\n  * `expanded` {`boolean`} - icon when expanded\n\n  * `disabled` {`boolean`} - whether the tabbed interface is disabled\n\n  * `error` {`boolean`} - whether fieldset has fields with errors\n\n  * `hidden` {`boolean`} - whether the tabbed interface is hidden\n\n  * `readonly` {`boolean`} - whether the tabbed interface is hidden\n\n  * `label` {`string`} - fieldset legend\n\n  * `name` {`string`} - unique name\n\n  * `description` {`string`} - optional description\n\nProperties:\n\n  * `count` {`number`} - \n\n  * `expanded` {`boolean`} - icon when expanded\n\n  * `disableAdd` {`boolean`} - \n\n  * `legend` {`TemplateResult`} - \n\n  * `desc` {`TemplateResult`} - \n\n  * `fields` {`TemplateResult`} - \n\n  * `disabled` {`boolean`} - whether the tabbed interface is disabled\n\n  * `error` {`boolean`} - whether fieldset has fields with errors\n\n  * `hidden` {`boolean`} - whether the tabbed interface is hidden\n\n  * `readonly` {`boolean`} - whether the tabbed interface is hidden\n\n  * `label` {`string`} - fieldset legend\n\n  * `name` {`string`} - unique name\n\n  * `description` {`string`} - optional description",
      "attributes": [
        {
          "name": "count",
          "description": "`count` {`number`} - \n\nProperty: count\n\nDefault: 0"
        },
        {
          "name": "expanded",
          "description": "`expanded` {`boolean`} - icon when expanded\n\nProperty: expanded\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - whether the tabbed interface is disabled\n\nProperty: disabled",
          "valueSet": "v"
        },
        {
          "name": "error",
          "description": "`error` {`boolean`} - whether fieldset has fields with errors\n\nProperty: error",
          "valueSet": "v"
        },
        {
          "name": "hidden",
          "description": "`hidden` {`boolean`} - whether the tabbed interface is hidden\n\nProperty: hidden",
          "valueSet": "v"
        },
        {
          "name": "readonly",
          "description": "`readonly` {`boolean`} - whether the tabbed interface is hidden\n\nProperty: readonly",
          "valueSet": "v"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - fieldset legend\n\nProperty: label"
        },
        {
          "name": "name",
          "description": "`name` {`string`} - unique name\n\nProperty: name"
        },
        {
          "name": "description",
          "description": "`description` {`string`} - optional description\n\nProperty: description"
        },
        {
          "name": "onadd",
          "description": "`add` {`CustomEvent<this>`} - "
        },
        {
          "name": "onremove",
          "description": "`remove` {`CustomEvent<any>`} - "
        },
        {
          "name": "ontoggle",
          "description": "`toggle` {`CustomEvent<this>`} - Fires when toggled."
        },
        {
          "name": "onexpand",
          "description": "`expand` {`CustomEvent<this>`} - Fires when expanded."
        },
        {
          "name": "oncollapse",
          "description": "`collapse` {`CustomEvent<this>`} - Fires when collapsed."
        }
      ]
    },
    {
      "name": "simple-fields-code",
      "description": "`simple-fields-code`\n HTML inputs (excluding submit, reset, button, and image)\n with label, description, error massage,\n and aria-invalid functionality if needed.\n\nEvents:\n\n  * `value-changed` {`CustomEvent<this>`} - \n\n  * `error-changed` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `editor-value` {`string`} - changes the value of the editor\n\n  * `autofocus` {`boolean`} - Automatically focus on field when the page is loaded\n\n  * `font-size` {`number`} - Font-size of editor\n\n  * `language` {`string`} - language of code-editor\n\n  * `mode` {`number`} - mode of code-editor\n\n  * `theme` {`number`} - theme of code-editor\n\n  * `description` {`string`} - Optional description of the field (or use slot=\"description\")\n\n  * `defaultErrorMessage` {`string`} - Optional validation error message to display\n\n  * `defaultRequiredMessage` {`string`} - Optional required validation error message to display\n\n  * `errorMessage` {`string`} - Validation error message to display\n\n  * `field` - Field element\n\n  * `label` {`string`} - Label for the field (or use slot=\"label\")\n\n  * `minchecked` {`number`} - Minimum number of checked items in fieldset\n\n  * `maxchecked` {`number`} - Minimum number of checked items in fieldset\n\n  * `maxwords` {`number`} - Maximum number of words in textarea\n\n  * `name` {`string`} - Name of the input form control. Submitted with the form as part of a name/value pair.\n\n  * `numberMessage` {`string`} - error message when number of items selected is not between min and max\n\n  * `pattern` {`string`} - regex pattern the value must match to be valid\n\n  * `patternMessage` {`string`} - error message when field does not match pattern\n\n  * `prefix` {`string`} - Optional prefix string (or use slot=\"prefix\")\n\n  * `readonly` {`boolean`} - Value is not editable\n\n  * `required` {`boolean`} - Whether field is required\n\n  * `requiredMessage` {`string`} - error message when field is required and has no value\n\n  * `suffix` {`string`} - Optional suffix string (or use slot=\"suffix\")\n\n  * `type` {`string`} - Type of input form control\n\n  * `value` - Current value of the form control. Submitted with the form as part of a name/value pair.\n\n  * `counter` {`string`} - a counter text and textareas: \"character\", \"word\" or unset for none\n\n  * `autovalidate` {`boolean`} - Automatically validate field\n\n  * `disabled` {`boolean`} - Whether the form control is disabled\n\n  * `hidden` {`boolean`} - Whether the field is hidden\n\n  * `error` {`boolean`} - Whether field has errors\n\n  * `id` {`string`} - Unique id\n\n  * `inline` {`boolean`} - Whether field and label should be inline\n\n  * `validTypes` {`any[]`} - List of valid field types\n\nProperties:\n\n  * `editorValue` {`string`} - changes the value of the editor\n\n  * `autofocus` {`boolean`} - Automatically focus on field when the page is loaded\n\n  * `fontSize` {`number`} - Font-size of editor\n\n  * `language` {`string`} - language of code-editor\n\n  * `mode` {`number`} - mode of code-editor\n\n  * `theme` {`number`} - theme of code-editor\n\n  * `description` {`string`} - Optional description of the field (or use slot=\"description\")\n\n  * `defaultErrorMessage` {`string`} - Optional validation error message to display\n\n  * `defaultRequiredMessage` {`string`} - Optional required validation error message to display\n\n  * `errorMessage` {`string`} - Validation error message to display\n\n  * `field` - Field element\n\n  * `label` {`string`} - Label for the field (or use slot=\"label\")\n\n  * `minchecked` {`number`} - Minimum number of checked items in fieldset\n\n  * `maxchecked` {`number`} - Minimum number of checked items in fieldset\n\n  * `maxwords` {`number`} - Maximum number of words in textarea\n\n  * `name` {`string`} - Name of the input form control. Submitted with the form as part of a name/value pair.\n\n  * `numberMessage` {`string`} - error message when number of items selected is not between min and max\n\n  * `pattern` {`string`} - regex pattern the value must match to be valid\n\n  * `patternMessage` {`string`} - error message when field does not match pattern\n\n  * `prefix` {`string`} - Optional prefix string (or use slot=\"prefix\")\n\n  * `readonly` {`boolean`} - Value is not editable\n\n  * `required` {`boolean`} - Whether field is required\n\n  * `requiredMessage` {`string`} - error message when field is required and has no value\n\n  * `suffix` {`string`} - Optional suffix string (or use slot=\"suffix\")\n\n  * `type` {`string`} - Type of input form control\n\n  * `value` - Current value of the form control. Submitted with the form as part of a name/value pair.\n\n  * `descriptionTemplate` - template for slotted or shadow DOM description\n\n  * `errorTemplate` - template for slotted or shadow DOM error message\n\n  * `fieldBottom` - gets bottom (metadata, description, and error message) of a field\n\n  * `fieldId` {`string`} - gets field's id\n\n  * `fieldMainTemplate` - template label and field\n\n  * `fieldMeta` - gets field metadata\n\n  * `hasFieldset` {`boolean`} - \n\n  * `labelTemplate` - template for slotted or shadow DOM label\n\n  * `multicheck` {`false | Element | null`} - \n\n  * `numberError` {`number | false`} - determines if number of items selected\nis not between min and max\n\n  * `numeric` {`boolean`} - determines if field is numeric\n\n  * `patternError` - determines if value does not match regex pattern\n\n  * `prefixTemplate` - template for slotted or shadow DOM prefix\n\n  * `requiredError` - determines if field is required and blank\n\n  * `slottedFieldObserver` {`void`} - overridden mutation observer\n\n  * `suffixTemplate` - template for slotted or shadow DOM suffix\n\n  * `counter` {`string`} - a counter text and textareas: \"character\", \"word\" or unset for none\n\n  * `autovalidate` {`boolean`} - Automatically validate field\n\n  * `disabled` {`boolean`} - Whether the form control is disabled\n\n  * `hidden` {`boolean`} - Whether the field is hidden\n\n  * `error` {`boolean`} - Whether field has errors\n\n  * `id` {`string`} - Unique id\n\n  * `inline` {`boolean`} - Whether field and label should be inline\n\n  * `validTypes` {`any[]`} - List of valid field types",
      "attributes": [
        {
          "name": "editor-value",
          "description": "`editor-value` {`string`} - changes the value of the editor\n\nProperty: editorValue"
        },
        {
          "name": "autofocus",
          "description": "`autofocus` {`boolean`} - Automatically focus on field when the page is loaded\n\nProperty: autofocus\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "font-size",
          "description": "`font-size` {`number`} - Font-size of editor\n\nProperty: fontSize\n\nDefault: 14"
        },
        {
          "name": "language",
          "description": "`language` {`string`} - language of code-editor\n\nProperty: language\n\nDefault: html"
        },
        {
          "name": "mode",
          "description": "`mode` {`number`} - mode of code-editor\n\nProperty: mode\n\nDefault: html"
        },
        {
          "name": "theme",
          "description": "`theme` {`number`} - theme of code-editor\n\nProperty: theme\n\nDefault: vs"
        },
        {
          "name": "description",
          "description": "`description` {`string`} - Optional description of the field (or use slot=\"description\")\n\nProperty: description"
        },
        {
          "name": "defaultErrorMessage",
          "description": "`defaultErrorMessage` {`string`} - Optional validation error message to display\n\nProperty: defaultErrorMessage"
        },
        {
          "name": "defaultRequiredMessage",
          "description": "`defaultRequiredMessage` {`string`} - Optional required validation error message to display\n\nProperty: defaultRequiredMessage"
        },
        {
          "name": "errorMessage",
          "description": "`errorMessage` {`string`} - Validation error message to display\n\nProperty: errorMessage"
        },
        {
          "name": "field",
          "description": "`field` - Field element\n\nProperty: field"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the field (or use slot=\"label\")\n\nProperty: label"
        },
        {
          "name": "minchecked",
          "description": "`minchecked` {`number`} - Minimum number of checked items in fieldset\n\nProperty: minchecked"
        },
        {
          "name": "maxchecked",
          "description": "`maxchecked` {`number`} - Minimum number of checked items in fieldset\n\nProperty: maxchecked"
        },
        {
          "name": "maxwords",
          "description": "`maxwords` {`number`} - Maximum number of words in textarea\n\nProperty: maxwords"
        },
        {
          "name": "name",
          "description": "`name` {`string`} - Name of the input form control. Submitted with the form as part of a name/value pair.\n\nProperty: name"
        },
        {
          "name": "numberMessage",
          "description": "`numberMessage` {`string`} - error message when number of items selected is not between min and max\n\nProperty: numberMessage"
        },
        {
          "name": "pattern",
          "description": "`pattern` {`string`} - regex pattern the value must match to be valid\n\nProperty: pattern"
        },
        {
          "name": "patternMessage",
          "description": "`patternMessage` {`string`} - error message when field does not match pattern\n\nProperty: patternMessage"
        },
        {
          "name": "prefix",
          "description": "`prefix` {`string`} - Optional prefix string (or use slot=\"prefix\")\n\nProperty: prefix"
        },
        {
          "name": "readonly",
          "description": "`readonly` {`boolean`} - Value is not editable\n\nProperty: readonly\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "required",
          "description": "`required` {`boolean`} - Whether field is required\n\nProperty: required",
          "valueSet": "v"
        },
        {
          "name": "requiredMessage",
          "description": "`requiredMessage` {`string`} - error message when field is required and has no value\n\nProperty: requiredMessage"
        },
        {
          "name": "suffix",
          "description": "`suffix` {`string`} - Optional suffix string (or use slot=\"suffix\")\n\nProperty: suffix"
        },
        {
          "name": "type",
          "description": "`type` {`string`} - Type of input form control\n\nProperty: type"
        },
        {
          "name": "value",
          "description": "`value` - Current value of the form control. Submitted with the form as part of a name/value pair.\n\nProperty: value"
        },
        {
          "name": "counter",
          "description": "`counter` {`string`} - a counter text and textareas: \"character\", \"word\" or unset for none\n\nProperty: counter\n\nDefault: none"
        },
        {
          "name": "autovalidate",
          "description": "`autovalidate` {`boolean`} - Automatically validate field\n\nProperty: autovalidate\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Whether the form control is disabled\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "hidden",
          "description": "`hidden` {`boolean`} - Whether the field is hidden\n\nProperty: hidden\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "error",
          "description": "`error` {`boolean`} - Whether field has errors\n\nProperty: error\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - Unique id\n\nProperty: id"
        },
        {
          "name": "inline",
          "description": "`inline` {`boolean`} - Whether field and label should be inline\n\nProperty: inline\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "validTypes",
          "description": "`validTypes` {`any[]`} - List of valid field types\n\nProperty: validTypes\n\nDefault: checkbox,color,date,datetime-local,email,file,fieldset,hidden,month,number,password,radio,range,search,select,tel,text,textarea,time,url,week"
        },
        {
          "name": "onvalue-changed",
          "description": "`value-changed` {`CustomEvent<this>`} - "
        },
        {
          "name": "onerror-changed",
          "description": "`error-changed` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "simple-fields-container",
      "description": "`simple-fields-container`\n Progressive enhanced container HTML fields\n with label, description, error massage,\n and aria-invalid functionality if needed.\n\nEvents:\n\n  * `error-changed` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `description` {`string`} - Optional description of the field (or use slot=\"description\")\n\n  * `defaultErrorMessage` {`string`} - Optional validation error message to display\n\n  * `defaultRequiredMessage` {`string`} - Optional required validation error message to display\n\n  * `errorMessage` {`string`} - Validation error message to display\n\n  * `field` - Field element\n\n  * `label` {`string`} - Label for the field (or use slot=\"label\")\n\n  * `minchecked` {`number`} - Minimum number of checked items in fieldset\n\n  * `maxchecked` {`number`} - Minimum number of checked items in fieldset\n\n  * `maxwords` {`number`} - Maximum number of words in textarea\n\n  * `name` {`string`} - Name of the input form control. Submitted with the form as part of a name/value pair.\n\n  * `numberMessage` {`string`} - error message when number of items selected is not between min and max\n\n  * `pattern` {`string`} - regex pattern the value must match to be valid\n\n  * `patternMessage` {`string`} - error message when field does not match pattern\n\n  * `prefix` {`string`} - Optional prefix string (or use slot=\"prefix\")\n\n  * `readonly` {`boolean`} - Value is not editable\n\n  * `required` {`boolean`} - Whether field is required\n\n  * `requiredMessage` {`string`} - error message when field is required and has no value\n\n  * `suffix` {`string`} - Optional suffix string (or use slot=\"suffix\")\n\n  * `type` {`string`} - Type of input form control\n\n  * `value` - Value of field\n\n  * `counter` {`string`} - a counter text and textareas: \"character\", \"word\" or unset for none\n\n  * `autovalidate` {`boolean`} - Automatically validate field\n\n  * `disabled` {`boolean`} - Whether the form control is disabled\n\n  * `hidden` {`boolean`} - Whether the field is hidden\n\n  * `error` {`boolean`} - Whether field has errors\n\n  * `id` {`string`} - Unique id\n\n  * `inline` {`boolean`} - Whether field and label should be inline\n\n  * `validTypes` {`any[]`} - List of valid field types\n\nProperties:\n\n  * `description` {`string`} - Optional description of the field (or use slot=\"description\")\n\n  * `defaultErrorMessage` {`string`} - Optional validation error message to display\n\n  * `defaultRequiredMessage` {`string`} - Optional required validation error message to display\n\n  * `errorMessage` {`string`} - Validation error message to display\n\n  * `field` - Field element\n\n  * `label` {`string`} - Label for the field (or use slot=\"label\")\n\n  * `minchecked` {`number`} - Minimum number of checked items in fieldset\n\n  * `maxchecked` {`number`} - Minimum number of checked items in fieldset\n\n  * `maxwords` {`number`} - Maximum number of words in textarea\n\n  * `name` {`string`} - Name of the input form control. Submitted with the form as part of a name/value pair.\n\n  * `numberMessage` {`string`} - error message when number of items selected is not between min and max\n\n  * `pattern` {`string`} - regex pattern the value must match to be valid\n\n  * `patternMessage` {`string`} - error message when field does not match pattern\n\n  * `prefix` {`string`} - Optional prefix string (or use slot=\"prefix\")\n\n  * `readonly` {`boolean`} - Value is not editable\n\n  * `required` {`boolean`} - Whether field is required\n\n  * `requiredMessage` {`string`} - error message when field is required and has no value\n\n  * `suffix` {`string`} - Optional suffix string (or use slot=\"suffix\")\n\n  * `type` {`string`} - Type of input form control\n\n  * `value` - Value of field\n\n  * `descriptionTemplate` - template for slotted or shadow DOM description\n\n  * `errorTemplate` - template for slotted or shadow DOM error message\n\n  * `fieldBottom` - gets bottom (metadata, description, and error message) of a field\n\n  * `fieldId` {`string`} - gets field's id\n\n  * `fieldMainTemplate` - template for slotted or shadow DOM label\n\n  * `fieldMeta` - gets field metadata\n\n  * `hasFieldset` {`boolean`} - \n\n  * `labelTemplate` - template for slotted or shadow DOM label\n\n  * `multicheck` {`false | Element | null`} - \n\n  * `numberError` {`number | false`} - determines if number of items selected\nis not between min and max\n\n  * `numeric` {`boolean`} - determines if field is numeric\n\n  * `patternError` - determines if value does not match regex pattern\n\n  * `prefixTemplate` - template for slotted or shadow DOM prefix\n\n  * `requiredError` - determines if field is required and blank\n\n  * `slottedFieldObserver` - mutation observer that updates field property with slotted field\noverride for shadow DOM field\n\n  * `suffixTemplate` - template for slotted or shadow DOM suffix\n\n  * `counter` {`string`} - a counter text and textareas: \"character\", \"word\" or unset for none\n\n  * `autovalidate` {`boolean`} - Automatically validate field\n\n  * `disabled` {`boolean`} - Whether the form control is disabled\n\n  * `hidden` {`boolean`} - Whether the field is hidden\n\n  * `error` {`boolean`} - Whether field has errors\n\n  * `id` {`string`} - Unique id\n\n  * `inline` {`boolean`} - Whether field and label should be inline\n\n  * `validTypes` {`any[]`} - List of valid field types",
      "attributes": [
        {
          "name": "description",
          "description": "`description` {`string`} - Optional description of the field (or use slot=\"description\")\n\nProperty: description"
        },
        {
          "name": "defaultErrorMessage",
          "description": "`defaultErrorMessage` {`string`} - Optional validation error message to display\n\nProperty: defaultErrorMessage"
        },
        {
          "name": "defaultRequiredMessage",
          "description": "`defaultRequiredMessage` {`string`} - Optional required validation error message to display\n\nProperty: defaultRequiredMessage"
        },
        {
          "name": "errorMessage",
          "description": "`errorMessage` {`string`} - Validation error message to display\n\nProperty: errorMessage"
        },
        {
          "name": "field",
          "description": "`field` - Field element\n\nProperty: field"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the field (or use slot=\"label\")\n\nProperty: label"
        },
        {
          "name": "minchecked",
          "description": "`minchecked` {`number`} - Minimum number of checked items in fieldset\n\nProperty: minchecked"
        },
        {
          "name": "maxchecked",
          "description": "`maxchecked` {`number`} - Minimum number of checked items in fieldset\n\nProperty: maxchecked"
        },
        {
          "name": "maxwords",
          "description": "`maxwords` {`number`} - Maximum number of words in textarea\n\nProperty: maxwords"
        },
        {
          "name": "name",
          "description": "`name` {`string`} - Name of the input form control. Submitted with the form as part of a name/value pair.\n\nProperty: name"
        },
        {
          "name": "numberMessage",
          "description": "`numberMessage` {`string`} - error message when number of items selected is not between min and max\n\nProperty: numberMessage"
        },
        {
          "name": "pattern",
          "description": "`pattern` {`string`} - regex pattern the value must match to be valid\n\nProperty: pattern"
        },
        {
          "name": "patternMessage",
          "description": "`patternMessage` {`string`} - error message when field does not match pattern\n\nProperty: patternMessage"
        },
        {
          "name": "prefix",
          "description": "`prefix` {`string`} - Optional prefix string (or use slot=\"prefix\")\n\nProperty: prefix"
        },
        {
          "name": "readonly",
          "description": "`readonly` {`boolean`} - Value is not editable\n\nProperty: readonly",
          "valueSet": "v"
        },
        {
          "name": "required",
          "description": "`required` {`boolean`} - Whether field is required\n\nProperty: required",
          "valueSet": "v"
        },
        {
          "name": "requiredMessage",
          "description": "`requiredMessage` {`string`} - error message when field is required and has no value\n\nProperty: requiredMessage"
        },
        {
          "name": "suffix",
          "description": "`suffix` {`string`} - Optional suffix string (or use slot=\"suffix\")\n\nProperty: suffix"
        },
        {
          "name": "type",
          "description": "`type` {`string`} - Type of input form control\n\nProperty: type"
        },
        {
          "name": "value",
          "description": "`value` - Value of field\n\nProperty: value"
        },
        {
          "name": "counter",
          "description": "`counter` {`string`} - a counter text and textareas: \"character\", \"word\" or unset for none\n\nProperty: counter\n\nDefault: none"
        },
        {
          "name": "autovalidate",
          "description": "`autovalidate` {`boolean`} - Automatically validate field\n\nProperty: autovalidate\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Whether the form control is disabled\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "hidden",
          "description": "`hidden` {`boolean`} - Whether the field is hidden\n\nProperty: hidden\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "error",
          "description": "`error` {`boolean`} - Whether field has errors\n\nProperty: error\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - Unique id\n\nProperty: id"
        },
        {
          "name": "inline",
          "description": "`inline` {`boolean`} - Whether field and label should be inline\n\nProperty: inline\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "validTypes",
          "description": "`validTypes` {`any[]`} - List of valid field types\n\nProperty: validTypes\n\nDefault: checkbox,color,date,datetime-local,email,file,fieldset,hidden,month,number,password,radio,range,search,select,tel,text,textarea,time,url,week"
        },
        {
          "name": "onerror-changed",
          "description": "`error-changed` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "simple-fields-field",
      "description": "`simple-fields-field`\n HTML inputs (excluding submit, reset, button, and image)\n with label, description, error massage,\n and aria-invalid functionality if needed.\n\nEvents:\n\n  * `value-changed` {`CustomEvent<this>`} - \n\n  * `error-changed` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `accept` {`string`} - Hint for expected file type in file upload controls\n\n  * `capture` {`string`} - Media capture input method in file upload controls\n\n  * `dirname` {`string`} - Name of form field to use for sending the element's directionality in form submission\n\n  * `list` {`string`} - Value of the id attribute of the `<datalist>` of autocomplete options\n\n  * `max` {`number`} - Maximum value for numeric field types\n\n  * `maxlength` {`number`} - Maximum length (number of characters) of `value`\n\n  * `min` {`number`} - Minimum value for numeric field types\n\n  * `minlength` {`number`} - Minimum length (number of characters) of `value`\n\n  * `placeholder` {`string`} - Content to be appear in the form control when the form control is empty\n\n  * `size` {`number`} - Size of the control\n\n  * `step` {`number`} - Incremental values that are valid\n\n  * `autocomplete` {`string`} - Hint for form autofill feature\n\n  * `autofocus` {`boolean`} - Automatically focus on field when the page is loaded\n\n  * `multiple` {`boolean`} - Whether to allow multiple values\n\n  * `spellcheck` {`string`} - Whether input subject to spell checking by browser/OS as \"true\", \"default\", or \"false\"\n\n  * `items-list` {`any[]`} - array of options [{value: \"key\", text: \"Text\"}] for select, radio options, and checkboxes,\nso that they can appear in a prescribed order,\neg. [{value: \"b\", text: \"Option B\"}, {value: \"a\", text: \"Option A\"}, {value: \"c\", text: \"Option C\"}]\n\n  * `options` - options {value: \"Text\"}  for select, radio options, and checkboxes,\nwhich are sorted by key,\neg. {a: \"Option A\", b: \"Option B\", c: \"Option C\"}\n\n  * `wrap` {`boolean`} - text wrapping for textarea,\n\"hard\": automatically inserts line breaks (CR+LF)\n\"soft\": all line breaks as CR+LF pair\n\"off\" : no wrapping / <textarea> becomes horizontally scrollable\n\n  * `description` {`string`} - Optional description of the field (or use slot=\"description\")\n\n  * `defaultErrorMessage` {`string`} - Optional validation error message to display\n\n  * `defaultRequiredMessage` {`string`} - Optional required validation error message to display\n\n  * `errorMessage` {`string`} - Validation error message to display\n\n  * `field` - Field element\n\n  * `label` {`string`} - Label for the field (or use slot=\"label\")\n\n  * `minchecked` {`number`} - Minimum number of checked items in fieldset\n\n  * `maxchecked` {`number`} - Minimum number of checked items in fieldset\n\n  * `maxwords` {`number`} - Maximum number of words in textarea\n\n  * `name` {`string`} - Name of the input form control. Submitted with the form as part of a name/value pair.\n\n  * `numberMessage` {`string`} - error message when number of items selected is not between min and max\n\n  * `pattern` {`string`} - regex pattern the value must match to be valid\n\n  * `patternMessage` {`string`} - error message when field does not match pattern\n\n  * `prefix` {`string`} - Optional prefix string (or use slot=\"prefix\")\n\n  * `readonly` {`boolean`} - Value is not editable\n\n  * `required` {`boolean`} - Whether field is required\n\n  * `requiredMessage` {`string`} - error message when field is required and has no value\n\n  * `suffix` {`string`} - Optional suffix string (or use slot=\"suffix\")\n\n  * `type` {`string`} - Type of input form control\n\n  * `value` - Current value of the form control. Submitted with the form as part of a name/value pair.\n\n  * `counter` {`string`} - a counter text and textareas: \"character\", \"word\" or unset for none\n\n  * `autovalidate` {`boolean`} - Automatically validate field\n\n  * `disabled` {`boolean`} - Whether the form control is disabled\n\n  * `hidden` {`boolean`} - Whether the field is hidden\n\n  * `error` {`boolean`} - Whether field has errors\n\n  * `id` {`string`} - Unique id\n\n  * `inline` {`boolean`} - Whether field and label should be inline\n\n  * `validTypes` {`any[]`} - List of valid field types\n\nProperties:\n\n  * `accept` {`string`} - Hint for expected file type in file upload controls\n\n  * `capture` {`string`} - Media capture input method in file upload controls\n\n  * `dirname` {`string`} - Name of form field to use for sending the element's directionality in form submission\n\n  * `list` {`string`} - Value of the id attribute of the `<datalist>` of autocomplete options\n\n  * `max` {`number`} - Maximum value for numeric field types\n\n  * `maxlength` {`number`} - Maximum length (number of characters) of `value`\n\n  * `min` {`number`} - Minimum value for numeric field types\n\n  * `minlength` {`number`} - Minimum length (number of characters) of `value`\n\n  * `placeholder` {`string`} - Content to be appear in the form control when the form control is empty\n\n  * `size` {`number`} - Size of the control\n\n  * `step` {`number`} - Incremental values that are valid\n\n  * `fieldElementTag` {`string`} - gets field element tag in shadow DOM\n\n  * `fieldsetTemplate` - template for `fieldset` in shadow DOM\n\n  * `inputTemplate` - template for `input` in shadow DOM\n\n  * `noOptions` {`boolean`} - gets whether or not the field has options\n\n  * `sortedOptions` {`any[]`} - gets a sorted list of option\n\n  * `selectTemplate` - template for `select` in shadow DOM\n\n  * `textareaTemplate` - template for `textarea` in shadow DOM\n\n  * `autocomplete` {`string`} - Hint for form autofill feature\n\n  * `autofocus` {`boolean`} - Automatically focus on field when the page is loaded\n\n  * `multiple` {`boolean`} - Whether to allow multiple values\n\n  * `spellcheck` {`string`} - Whether input subject to spell checking by browser/OS as \"true\", \"default\", or \"false\"\n\n  * `itemsList` {`any[]`} - array of options [{value: \"key\", text: \"Text\"}] for select, radio options, and checkboxes,\nso that they can appear in a prescribed order,\neg. [{value: \"b\", text: \"Option B\"}, {value: \"a\", text: \"Option A\"}, {value: \"c\", text: \"Option C\"}]\n\n  * `options` - options {value: \"Text\"}  for select, radio options, and checkboxes,\nwhich are sorted by key,\neg. {a: \"Option A\", b: \"Option B\", c: \"Option C\"}\n\n  * `wrap` {`boolean`} - text wrapping for textarea,\n\"hard\": automatically inserts line breaks (CR+LF)\n\"soft\": all line breaks as CR+LF pair\n\"off\" : no wrapping / <textarea> becomes horizontally scrollable\n\n  * `description` {`string`} - Optional description of the field (or use slot=\"description\")\n\n  * `defaultErrorMessage` {`string`} - Optional validation error message to display\n\n  * `defaultRequiredMessage` {`string`} - Optional required validation error message to display\n\n  * `errorMessage` {`string`} - Validation error message to display\n\n  * `field` - Field element\n\n  * `label` {`string`} - Label for the field (or use slot=\"label\")\n\n  * `minchecked` {`number`} - Minimum number of checked items in fieldset\n\n  * `maxchecked` {`number`} - Minimum number of checked items in fieldset\n\n  * `maxwords` {`number`} - Maximum number of words in textarea\n\n  * `name` {`string`} - Name of the input form control. Submitted with the form as part of a name/value pair.\n\n  * `numberMessage` {`string`} - error message when number of items selected is not between min and max\n\n  * `pattern` {`string`} - regex pattern the value must match to be valid\n\n  * `patternMessage` {`string`} - error message when field does not match pattern\n\n  * `prefix` {`string`} - Optional prefix string (or use slot=\"prefix\")\n\n  * `readonly` {`boolean`} - Value is not editable\n\n  * `required` {`boolean`} - Whether field is required\n\n  * `requiredMessage` {`string`} - error message when field is required and has no value\n\n  * `suffix` {`string`} - Optional suffix string (or use slot=\"suffix\")\n\n  * `type` {`string`} - Type of input form control\n\n  * `value` - Current value of the form control. Submitted with the form as part of a name/value pair.\n\n  * `descriptionTemplate` - template for slotted or shadow DOM description\n\n  * `errorTemplate` - template for slotted or shadow DOM error message\n\n  * `fieldBottom` - gets bottom (metadata, description, and error message) of a field\n\n  * `fieldId` {`string`} - gets field's id\n\n  * `fieldMainTemplate` - template label and field\n\n  * `fieldMeta` - gets field metadata\n\n  * `hasFieldset` {`boolean`} - \n\n  * `labelTemplate` - template for slotted or shadow DOM label\n\n  * `multicheck` {`boolean`} - \n\n  * `numberError` {`number | false`} - determines if number of items selected\nis not between min and max\n\n  * `numeric` {`boolean`} - determines if field is numeric\n\n  * `patternError` - determines if value does not match regex pattern\n\n  * `prefixTemplate` - template for slotted or shadow DOM prefix\n\n  * `requiredError` - determines if field is required and blank\n\n  * `slottedFieldObserver` {`void`} - overridden mutation observer\n\n  * `suffixTemplate` - template for slotted or shadow DOM suffix\n\n  * `counter` {`string`} - a counter text and textareas: \"character\", \"word\" or unset for none\n\n  * `autovalidate` {`boolean`} - Automatically validate field\n\n  * `disabled` {`boolean`} - Whether the form control is disabled\n\n  * `hidden` {`boolean`} - Whether the field is hidden\n\n  * `error` {`boolean`} - Whether field has errors\n\n  * `id` {`string`} - Unique id\n\n  * `inline` {`boolean`} - Whether field and label should be inline\n\n  * `validTypes` {`any[]`} - List of valid field types",
      "attributes": [
        {
          "name": "accept",
          "description": "`accept` {`string`} - Hint for expected file type in file upload controls\n\nProperty: accept"
        },
        {
          "name": "capture",
          "description": "`capture` {`string`} - Media capture input method in file upload controls\n\nProperty: capture"
        },
        {
          "name": "dirname",
          "description": "`dirname` {`string`} - Name of form field to use for sending the element's directionality in form submission\n\nProperty: dirname"
        },
        {
          "name": "list",
          "description": "`list` {`string`} - Value of the id attribute of the `<datalist>` of autocomplete options\n\nProperty: list"
        },
        {
          "name": "max",
          "description": "`max` {`number`} - Maximum value for numeric field types\n\nProperty: max"
        },
        {
          "name": "maxlength",
          "description": "`maxlength` {`number`} - Maximum length (number of characters) of `value`\n\nProperty: maxlength"
        },
        {
          "name": "min",
          "description": "`min` {`number`} - Minimum value for numeric field types\n\nProperty: min"
        },
        {
          "name": "minlength",
          "description": "`minlength` {`number`} - Minimum length (number of characters) of `value`\n\nProperty: minlength"
        },
        {
          "name": "placeholder",
          "description": "`placeholder` {`string`} - Content to be appear in the form control when the form control is empty\n\nProperty: placeholder"
        },
        {
          "name": "size",
          "description": "`size` {`number`} - Size of the control\n\nProperty: size"
        },
        {
          "name": "step",
          "description": "`step` {`number`} - Incremental values that are valid\n\nProperty: step"
        },
        {
          "name": "autocomplete",
          "description": "`autocomplete` {`string`} - Hint for form autofill feature\n\nProperty: autocomplete\n\nDefault: off"
        },
        {
          "name": "autofocus",
          "description": "`autofocus` {`boolean`} - Automatically focus on field when the page is loaded\n\nProperty: autofocus\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "multiple",
          "description": "`multiple` {`boolean`} - Whether to allow multiple values\n\nProperty: multiple\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "spellcheck",
          "description": "`spellcheck` {`string`} - Whether input subject to spell checking by browser/OS as \"true\", \"default\", or \"false\"\n\nProperty: spellcheck\n\nDefault: false"
        },
        {
          "name": "items-list",
          "description": "`items-list` {`any[]`} - array of options [{value: \"key\", text: \"Text\"}] for select, radio options, and checkboxes,\nso that they can appear in a prescribed order,\neg. [{value: \"b\", text: \"Option B\"}, {value: \"a\", text: \"Option A\"}, {value: \"c\", text: \"Option C\"}]\n\nProperty: itemsList\n\nDefault: "
        },
        {
          "name": "options",
          "description": "`options` - options {value: \"Text\"}  for select, radio options, and checkboxes,\nwhich are sorted by key,\neg. {a: \"Option A\", b: \"Option B\", c: \"Option C\"}\n\nProperty: options\n\nDefault: [object Object]"
        },
        {
          "name": "wrap",
          "description": "`wrap` {`boolean`} - text wrapping for textarea,\n\"hard\": automatically inserts line breaks (CR+LF)\n\"soft\": all line breaks as CR+LF pair\n\"off\" : no wrapping / <textarea> becomes horizontally scrollable\n\nProperty: wrap\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "description",
          "description": "`description` {`string`} - Optional description of the field (or use slot=\"description\")\n\nProperty: description"
        },
        {
          "name": "defaultErrorMessage",
          "description": "`defaultErrorMessage` {`string`} - Optional validation error message to display\n\nProperty: defaultErrorMessage"
        },
        {
          "name": "defaultRequiredMessage",
          "description": "`defaultRequiredMessage` {`string`} - Optional required validation error message to display\n\nProperty: defaultRequiredMessage"
        },
        {
          "name": "errorMessage",
          "description": "`errorMessage` {`string`} - Validation error message to display\n\nProperty: errorMessage"
        },
        {
          "name": "field",
          "description": "`field` - Field element\n\nProperty: field"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Label for the field (or use slot=\"label\")\n\nProperty: label"
        },
        {
          "name": "minchecked",
          "description": "`minchecked` {`number`} - Minimum number of checked items in fieldset\n\nProperty: minchecked"
        },
        {
          "name": "maxchecked",
          "description": "`maxchecked` {`number`} - Minimum number of checked items in fieldset\n\nProperty: maxchecked"
        },
        {
          "name": "maxwords",
          "description": "`maxwords` {`number`} - Maximum number of words in textarea\n\nProperty: maxwords"
        },
        {
          "name": "name",
          "description": "`name` {`string`} - Name of the input form control. Submitted with the form as part of a name/value pair.\n\nProperty: name"
        },
        {
          "name": "numberMessage",
          "description": "`numberMessage` {`string`} - error message when number of items selected is not between min and max\n\nProperty: numberMessage"
        },
        {
          "name": "pattern",
          "description": "`pattern` {`string`} - regex pattern the value must match to be valid\n\nProperty: pattern"
        },
        {
          "name": "patternMessage",
          "description": "`patternMessage` {`string`} - error message when field does not match pattern\n\nProperty: patternMessage"
        },
        {
          "name": "prefix",
          "description": "`prefix` {`string`} - Optional prefix string (or use slot=\"prefix\")\n\nProperty: prefix"
        },
        {
          "name": "readonly",
          "description": "`readonly` {`boolean`} - Value is not editable\n\nProperty: readonly\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "required",
          "description": "`required` {`boolean`} - Whether field is required\n\nProperty: required",
          "valueSet": "v"
        },
        {
          "name": "requiredMessage",
          "description": "`requiredMessage` {`string`} - error message when field is required and has no value\n\nProperty: requiredMessage"
        },
        {
          "name": "suffix",
          "description": "`suffix` {`string`} - Optional suffix string (or use slot=\"suffix\")\n\nProperty: suffix"
        },
        {
          "name": "type",
          "description": "`type` {`string`} - Type of input form control\n\nProperty: type"
        },
        {
          "name": "value",
          "description": "`value` - Current value of the form control. Submitted with the form as part of a name/value pair.\n\nProperty: value"
        },
        {
          "name": "counter",
          "description": "`counter` {`string`} - a counter text and textareas: \"character\", \"word\" or unset for none\n\nProperty: counter\n\nDefault: none"
        },
        {
          "name": "autovalidate",
          "description": "`autovalidate` {`boolean`} - Automatically validate field\n\nProperty: autovalidate\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - Whether the form control is disabled\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "hidden",
          "description": "`hidden` {`boolean`} - Whether the field is hidden\n\nProperty: hidden\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "error",
          "description": "`error` {`boolean`} - Whether field has errors\n\nProperty: error\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - Unique id\n\nProperty: id"
        },
        {
          "name": "inline",
          "description": "`inline` {`boolean`} - Whether field and label should be inline\n\nProperty: inline\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "validTypes",
          "description": "`validTypes` {`any[]`} - List of valid field types\n\nProperty: validTypes\n\nDefault: checkbox,color,date,datetime-local,email,file,fieldset,hidden,month,number,password,radio,range,search,select,tel,text,textarea,time,url,week"
        },
        {
          "name": "onvalue-changed",
          "description": "`value-changed` {`CustomEvent<this>`} - "
        },
        {
          "name": "onerror-changed",
          "description": "`error-changed` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "simple-fields-fieldset",
      "description": "`simple-fields-fieldset` takes in a JSON schema of type fieldset and builds a form,\n exposing a `value` property that represents an array described by the schema.\n\nAttributes:\n\n  * `disabled` {`boolean`} - whether the tabbed interface is disabled\n\n  * `error` {`boolean`} - whether fieldset has fields with errors\n\n  * `hidden` {`boolean`} - whether the tabbed interface is hidden\n\n  * `readonly` {`boolean`} - whether the tabbed interface is hidden\n\n  * `label` {`string`} - fieldset legend\n\n  * `name` {`string`} - unique name\n\n  * `description` {`string`} - optional description\n\nProperties:\n\n  * `legend` {`TemplateResult`} - \n\n  * `desc` {`TemplateResult`} - \n\n  * `fields` {`TemplateResult`} - \n\n  * `disabled` {`boolean`} - whether the tabbed interface is disabled\n\n  * `error` {`boolean`} - whether fieldset has fields with errors\n\n  * `hidden` {`boolean`} - whether the tabbed interface is hidden\n\n  * `readonly` {`boolean`} - whether the tabbed interface is hidden\n\n  * `label` {`string`} - fieldset legend\n\n  * `name` {`string`} - unique name\n\n  * `description` {`string`} - optional description",
      "attributes": [
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - whether the tabbed interface is disabled\n\nProperty: disabled",
          "valueSet": "v"
        },
        {
          "name": "error",
          "description": "`error` {`boolean`} - whether fieldset has fields with errors\n\nProperty: error",
          "valueSet": "v"
        },
        {
          "name": "hidden",
          "description": "`hidden` {`boolean`} - whether the tabbed interface is hidden\n\nProperty: hidden",
          "valueSet": "v"
        },
        {
          "name": "readonly",
          "description": "`readonly` {`boolean`} - whether the tabbed interface is hidden\n\nProperty: readonly",
          "valueSet": "v"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - fieldset legend\n\nProperty: label"
        },
        {
          "name": "name",
          "description": "`name` {`string`} - unique name\n\nProperty: name"
        },
        {
          "name": "description",
          "description": "`description` {`string`} - optional description\n\nProperty: description"
        }
      ]
    },
    {
      "name": "simple-fields-form-lite",
      "description": "`simple-fields-form-lite`\nbinding and submission capabilities on top of simple-fields-lite\n\nEvents:\n\n  * `response` {`CustomEvent<any>`} - fires event for things to react to about the response\n\n  * `simple-fields-form-data-loaded` {`CustomEvent<{ value: any; }>`} - fires event when forma data is loaded\n\nProperties:\n\n  * `formFields` - gets the simple-fields object\n\n  * `formElements` - form elements by id\n\n  * `formElementsArray` - list of form elements in order",
      "attributes": [
        {
          "name": "onresponse",
          "description": "`response` {`CustomEvent<any>`} - fires event for things to react to about the response"
        },
        {
          "name": "onsimple-fields-form-data-loaded",
          "description": "`simple-fields-form-data-loaded` {`CustomEvent<{ value: any; }>`} - fires event when forma data is loaded"
        }
      ]
    },
    {
      "name": "simple-fields-form",
      "description": "`simple-fields-form`\nbinding and submission capabilities on top of simple-fields\n\nEvents:\n\n  * `response` {`CustomEvent<any>`} - fires event for things to react to about the response\n\n  * `simple-fields-form-data-loaded` {`CustomEvent<{ value: any; }>`} - fires event when forma data is loaded\n\nProperties:\n\n  * `defaultSchemaConversion` - gets default schemaConversion so parts of it can be overridden easily\n\n  * `formFields` - gets the simple-fields object\n\n  * `formElements` - form elements by id\n\n  * `formElementsArray` - list of form elements in order",
      "attributes": [
        {
          "name": "onresponse",
          "description": "`response` {`CustomEvent<any>`} - fires event for things to react to about the response"
        },
        {
          "name": "onsimple-fields-form-data-loaded",
          "description": "`simple-fields-form-data-loaded` {`CustomEvent<{ value: any; }>`} - fires event when forma data is loaded"
        }
      ]
    },
    {
      "name": "simple-fields-lite",
      "description": "`simple-fields-lite`\nUses JSON Schema of fields to display a series of fields\n\n### Styling\n`<simple-fields-lite>` provides following custom properties\nfor styling:\n\nCustom property | Description | Default\n----------------|-------------|--------\n`--simple-fields-margin` | vertical margin around container | 16px\n`--simple-fields-margin-small` | smaller vertical margin above field itself | 8px\n`--simple-fields-border-radius` | default border-radius | 2px\n`--simple-fields-color` | text color | black\n`--simple-fields-background-color` | background color | white\n`--simple-fields-error-color` | error text color | #dd2c00\n`--simple-fields-accent-color` | accent text/underline color | #3f51b5\n`--simple-fields-border-color` | border-/underline color | #999\n\n#### Field text\nCustom property | Description | Default\n----------------|-------------|--------\n`--simple-fields-font-size` | font-size of field | 16px\n`--simple-fields-font-family` | font-size of field | sans-serif\n`--simple-fields-line-height` | line-height of field | 22px\n\n#### Detail text\nCustom property | Description | Default\n----------------|-------------|--------\n`--simple-fields-detail-font-size` | font-size of field details | 12px\n`--simple-fields-detail-font-family` | font-size of field details | sans-serif\n`--simple-fields-detail-line-height` | line-height of field details | 22px\n\n#### Disabled Fields\nCustom property | Description | Default\n----------------|-------------|--------\n`--simple-fields-disabled-color` | disabled text color | #999\n`--simple-fields-disabled-opacity` | opacity for disabled field | 0.7\n\n### JSON Schema Format\nThis element accepts JSON schema with additional features noted in the example below:\n```\n{\n$schema: \"http://json-schema.org/schema#\",\ntitle: \"Store\",\ntype: \"object\",\nformat: \"tabs\",                                 //default object behavior can be overridden by format\nrequired: [ \"name\", \"email\" ],\n  properties: {\n    settings: {\n      title: \"Settings\",\n      description: \"Configure the following.\",\n      type: \"object\",\n      format: \"tabs\",\n      properties: {\n        \"basic-input\": {\n          title: \"Basic input page\",\n          description: \"Basic contact settings\",\n          type: \"object\",\n          properties: {\n            branch: {\n              title: \"Branch\",\n              type: \"string\"\n            },\n              name: {\n                title: \"Name\",\n                type: \"string\"\n              },\n              address: {\n                title: \"Address\",\n                type: \"string\",\n                minLength: 3\n              },\n              city: {\n                title: \"City\",\n                type: \"string\",\n                minLength: 3\n              },\n              province: {\n                title: \"Province\",\n                type: \"string\",\n                minLength: 2\n              },\n              country: {\n                title: \"Country\",\n                type: \"string\",\n                minLength: 2\n              },\n              postalCode: {\n                title: \"Postal/Zip Code\",\n                type: \"string\",\n                pattern:\n                  \"[a-zA-Z][0-9][a-zA-Z]\\\\s*[0-9][a-zA-Z][0-9]|[0-9]{5}(-[0-9]{4})?\"\n              },\n              email: {\n                title: \"Email\",\n                type: \"string\",\n                pattern:\n                  \"(?:^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}$)|(?:^$)\"\n              },\n              website: {\n                title: \"Website\",\n                type: \"string\",\n                format: \"uri\"\n              },\n              establishedDate: {\n                title: \"Established Date\",\n                type: \"string\",\n                format: \"date\"\n              },\n              closedDate: {\n                title: \"Closed Date\",\n                type: [\"string\", \"null\"],\n                format: \"date\"\n              }\n            }\n          },\n          arrays: {\n          title: \"Basic arrays page\",\n          description: \"Demonstrates arrays\",\n          type: \"object\",\n          properties: {\n            phoneNumbers: {\n              title: \"Phone numbers\",\n              description: \"List phone numbers and type of number.\",\n              type: \"array\",\n              items: {\n                type: \"object\",\n                previewBy: [\"phoneNumber\"],                               //simple-fields-array allows a preview field \n                                                                          //for progressive disclosure of array items\n                properties: {\n                  type: {\n                    title: \"Type\",\n                    type: \"string\"\n                  },\n                  phoneNumber: {\n                    title: \"Phone Number\",\n                    type: \"string\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n### Configuring schemaConversion Property\nYou can customise elements from JSON schema conversion by setting `schemaConversion` property.\n```\ntype: {                                       //For properties in \"this.schema\", define elements based on a property's \"type\"\nobject: {                                   //Defines element used when property's \"type\" is an \"object\"\n  format: {                                 //Optional: define elements for \"object\" properties by \"format\"\n    \"tabs\": {                               //Defines element used for object properties when \"format\" is \"tabs\"\n      element: \"a11y-tabs\"                  //Element to create, eg. \"paper-input\", \"select\", \"simple-fields-array\", etc.\n      descriptionProperty: \"description\"    //Optional: element's property that sets its description, e.g. \"description\"\n      descriptionSlot: \"description\"        //Optional: element's slot that contains its description, e.g. \"description\"\n      errorProperty: \"error\"                //Optional: element's property that sets its error status, e.g. \"error\"\n      errorChangedProperty: \"error\"         //Optional: event element fires when error status changes, e.g. \"error-changed\"\n      errorMessageProperty: \"errorMessage\"  //Optional: element's property that sets its error message, e.g. \"errorMessage\"\n      errorMessageSlot: \"errorMessage\"      //Optional: element's slot that contains its error message, e.g. \"errorMessage\"\n      labelProperty: \"label\"                //Optional: element's property that sets its label, e.g. \"label\"\n      labelSlot: \"label\"                    //Optional: element's slot that contains its label, e.g. \"label\"\n      valueProperty: \"value\"                //Optional: element's property that gets its value, e.g. \"value\" or \"checked\"\n      setValueProperty: \"value\"             //Optional: element's property that sets its value, e.g. \"value\" or \"checked\" (default is same as valueProperty)\n      valueChangedProperty: \"value-changed\" //Optional: event element fires when value property changes, e.g. \"value-changed\" or \"click\"\n      valueSlot: \"\"                         //Optional: element's slot that's used to set its value, e.g. \"\"\n      description: \"\"                       //Optional: element that contains description, e.g. \"p\", \"span\", \"paper-tooltip\", etc.\n      child: {                              //Optional: child elements to be appended\n        element: \"a11y-tab\"                 //Optional: type of child element, eg. \"paper-input\", \"select\", \"simple-fields-array\", etc.\n        attributes: {                       //Optional: sets child element's attributes based on this.schemaConversion\n          disabled: true                    //Example: sets disabled to true  \n        } \n        properties: {                       //Optional: sets child element's attributes based on this.schema properties\n          icon: \"iconName\"                  //Example: sets child element's icon property to this.schema property's iconName \n        }, \n        slots: {                            //Optional: inserts schema properties in child element's slots\n          label: \"label\",                   //Example: places schema property's label into child element's label slot\n          \"\": \"description\"                 //Example: places schema property's description into child element's unnamed slot\n        } \n      },\n      attributes: {},\n      properties: {},\n      slots: {}\n    }\n  },\n  defaultSettings: {                        //Default element used for object properties\n    element: \"\"\n    label: \"\"\n    description: \"\"     \n    attributes: {}       \n    properties: {}       \n    slots: {}           \n  }\n}\n}\n```\n\nEvents:\n\n  * `value-changed` {`CustomEvent<this>`} - \n\n  * `fields-changed` {`CustomEvent<this>`} - \n\n  * `schema-changed` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `error` - Error messages by field name,\neg. `{ contactinfo.email: \"A valid email is required.\" }`\n\n  * `elementizer` - Conversion from JSON Schema to HTML form elements.\n_See [Configuring schemaConversion Property](configuring-the-schemaConversion-property) above._\n\n  * `disableAutofocus` {`boolean`} - Disables autofocus on fields.\n\n  * `lang` {`string`} - Language of the fields.\n\n  * `resources` - resource link\n\n  * `__formElements` - form elements by id and config data in schema\n\n  * `__formElementsArray` {`any[]`} - list form elements in order and config data in schema\n\n  * `schema` - Fields schema.\n_See [Fields Schema Format](fields-schema-format) above._\n\n  * `value` - value of fields\n\nProperties:\n\n  * `error` - Error messages by field name,\neg. `{ contactinfo.email: \"A valid email is required.\" }`\n\n  * `elementizer` - Conversion from JSON Schema to HTML form elements.\n_See [Configuring schemaConversion Property](configuring-the-schemaConversion-property) above._\n\n  * `formElements` - form elements by id\n\n  * `formElementsArray` {`any[]`} - list of form elements in order\n\n  * `schemaConversion` - gets JSON schema to form element conversion object\n\n  * `valid` {`boolean`} - whether there are no errors\n\n  * `disableAutofocus` {`boolean`} - Disables autofocus on fields.\n\n  * `language` {`string`} - Language of the fields.\n\n  * `resources` - resource link\n\n  * `__formElements` - form elements by id and config data in schema\n\n  * `__formElementsArray` {`any[]`} - list form elements in order and config data in schema\n\n  * `schema` - Fields schema.\n_See [Fields Schema Format](fields-schema-format) above._\n\n  * `value` - value of fields",
      "attributes": [
        {
          "name": "error",
          "description": "`error` - Error messages by field name,\neg. `{ contactinfo.email: \"A valid email is required.\" }`\n\nProperty: error"
        },
        {
          "name": "elementizer",
          "description": "`elementizer` - Conversion from JSON Schema to HTML form elements.\n_See [Configuring schemaConversion Property](configuring-the-schemaConversion-property) above._\n\nProperty: elementizer"
        },
        {
          "name": "disableAutofocus",
          "description": "`disableAutofocus` {`boolean`} - Disables autofocus on fields.\n\nProperty: disableAutofocus\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "`lang` {`string`} - Language of the fields.\n\nProperty: language\n\nDefault: en"
        },
        {
          "name": "resources",
          "description": "`resources` - resource link\n\nProperty: resources\n\nDefault: [object Object]"
        },
        {
          "name": "__formElements",
          "description": "`__formElements` - form elements by id and config data in schema\n\nProperty: __formElements\n\nDefault: [object Object]"
        },
        {
          "name": "__formElementsArray",
          "description": "`__formElementsArray` {`any[]`} - list form elements in order and config data in schema\n\nProperty: __formElementsArray\n\nDefault: "
        },
        {
          "name": "schema",
          "description": "`schema` - Fields schema.\n_See [Fields Schema Format](fields-schema-format) above._\n\nProperty: schema\n\nDefault: [object Object]"
        },
        {
          "name": "value",
          "description": "`value` - value of fields\n\nProperty: value\n\nDefault: [object Object]"
        },
        {
          "name": "onvalue-changed",
          "description": "`value-changed` {`CustomEvent<this>`} - "
        },
        {
          "name": "onfields-changed",
          "description": "`fields-changed` {`CustomEvent<this>`} - "
        },
        {
          "name": "onschema-changed",
          "description": "`schema-changed` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "simple-fields-tab",
      "description": "`simple-fields-tab` takes in a JSON schema of type array and builds a form,\nexposing a `value` property that represents an array described by the schema.\n\nEvents:\n\n  * `a11y-tab-changed` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `aria-labelledby` {`string`} - \n\n  * `flag-icon` {`string`} - optional flag icon the tab, eg. `av:fiber-new`, `icons:warning`, or `icons:error`\n\n  * `icon` {`string`} - icon for this tab, eg. `maps:local-airport`, `maps:local-bar`, or `notification:wifi`\n\n  * `id` {`string`} - the unique identifier and anchor for the tab\n\n  * `label` {`string`} - label for the tab\n\n  * `disabled` {`boolean`} - whether the tabbed interface is disabled\n\n  * `hidden` {`boolean`} - whether the tab is hidden\n\n  * `order` {`number`} - order of the tab\n\n  * `role` {`string`} - \n\n  * `total` {`number`} - total number of tabs\n\n  * `tabindex` {`number`} - total number of tabs\n\n  * `flag` {`string`} - optional flag the tab, eg. `new`, `alert`, or `error`\n\nProperties:\n\n  * `ariaLabelledby` {`string`} - \n\n  * `flagIcon` {`string`} - optional flag icon the tab, eg. `av:fiber-new`, `icons:warning`, or `icons:error`\n\n  * `icon` {`string`} - icon for this tab, eg. `maps:local-airport`, `maps:local-bar`, or `notification:wifi`\n\n  * `id` {`string`} - the unique identifier and anchor for the tab\n\n  * `label` {`string`} - label for the tab\n\n  * `observer` - returns mutation observer\n\n  * `xOfY` {`string`} - gets x of y string\n\n  * `disabled` {`boolean`} - whether the tabbed interface is disabled\n\n  * `hidden` {`boolean`} - whether the tab is hidden\n\n  * `order` {`number`} - order of the tab\n\n  * `role` {`string`} - \n\n  * `total` {`number`} - total number of tabs\n\n  * `tabindex` {`number`} - total number of tabs\n\n  * `flag` {`string`} - optional flag the tab, eg. `new`, `alert`, or `error`",
      "attributes": [
        {
          "name": "aria-labelledby",
          "description": "`aria-labelledby` {`string`} - \n\nProperty: ariaLabelledby"
        },
        {
          "name": "flag-icon",
          "description": "`flag-icon` {`string`} - optional flag icon the tab, eg. `av:fiber-new`, `icons:warning`, or `icons:error`\n\nProperty: flagIcon"
        },
        {
          "name": "icon",
          "description": "`icon` {`string`} - icon for this tab, eg. `maps:local-airport`, `maps:local-bar`, or `notification:wifi`\n\nProperty: icon"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - the unique identifier and anchor for the tab\n\nProperty: id"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - label for the tab\n\nProperty: label"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - whether the tabbed interface is disabled\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "hidden",
          "description": "`hidden` {`boolean`} - whether the tab is hidden\n\nProperty: hidden\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "order",
          "description": "`order` {`number`} - order of the tab\n\nProperty: order\n\nDefault: 1"
        },
        {
          "name": "role",
          "description": "`role` {`string`} - \n\nProperty: role\n\nDefault: tabpanel"
        },
        {
          "name": "total",
          "description": "`total` {`number`} - total number of tabs\n\nProperty: total\n\nDefault: 1"
        },
        {
          "name": "tabindex",
          "description": "`tabindex` {`number`} - total number of tabs\n\nProperty: tabindex\n\nDefault: 0"
        },
        {
          "name": "flag",
          "description": "`flag` {`string`} - optional flag the tab, eg. `new`, `alert`, or `error`\n\nProperty: flag\n\nDefault: "
        },
        {
          "name": "ona11y-tab-changed",
          "description": "`a11y-tab-changed` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "simple-fields-tabs",
      "description": "`simple-fields-tabs` takes in a JSON schema of type array and builds a form,\nexposing a `value` property that represents an array described by the schema.\n\nEvents:\n\n  * `active-tab-changed` {`CustomEvent<this>`} - \n\n  * `responsive-element` {`CustomEvent<{ attribute: string; custom: string; element: this; sm: number; md: number; lg: number; xl: number; }>`} - \n\n  * `responsive-element-deleted` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `aria-label` {`string`} - \n\n  * `active-tab` {`string`} - id of active tab\n\n  * `icon-breakpoint` {`number`} - Optional minimum breakpoint for showing tab text with icons, or\nDefault is always text with icons.\n`-1` forces icon-only mode.\n\n  * `id` {`string`} - unique identifier/anchor for tabbed interface\n\n  * `layout-breakpoint` {`number`} - Optional minimum breakpoint for horizontal layout of tabs.\nDefault is unset (always horizontal).\n`-1` forces vertical-only mode.\n\n  * `sticky` {`boolean`} - whether tabs are sticky\n\n  * `__tabButtons` {`any[]`} - an array of tab buttons\n\n  * `full-width` {`boolean`} - if tabs should be full width or not\n\n  * `disabled` {`boolean`} - whether tabbed interface is disabled\n\n  * `hidden` {`boolean`} - whether tabbed interface is hidden\n\n  * `__tabs` {`any[]`} - an array of tab data based on slotted `a11y-tab` elements\n\n  * `__tabFocus` {`number`} - which tab button has ketboard focus\n\n  * `responsive-width` {`number`} - width in pixels\n\n  * `responsive-size` {`string`} - size of tabs,\nwhere `xs` is smaller breakpoint\nand `xs` is larger breakpoint\n\n  * `sm` {`number`} - Miniumum value for small breakpoint\n\n  * `md` {`number`} - Miniumum value for medium breakpoint\n\n  * `lg` {`number`} - Miniumum value for large breakpoint\n\n  * `xl` {`number`} - Miniumum value for extra-large breakpoint\n\nProperties:\n\n  * `ariaLabel` {`string`} - \n\n  * `activeTab` {`string`} - id of active tab\n\n  * `iconBreakpoint` {`number`} - Optional minimum breakpoint for showing tab text with icons, or\nDefault is always text with icons.\n`-1` forces icon-only mode.\n\n  * `id` {`string`} - unique identifier/anchor for tabbed interface\n\n  * `layoutBreakpoint` {`number`} - Optional minimum breakpoint for horizontal layout of tabs.\nDefault is unset (always horizontal).\n`-1` forces vertical-only mode.\n\n  * `sticky` {`boolean`} - whether tabs are sticky\n\n  * `__tabButtons` {`any[]`} - an array of tab buttons\n\n  * `buttons` - \n\n  * `iconsOnly` {`boolean`} - determines if tabs should show icons only\n\n  * `observer` - mutation observer for tabs\n\n  * `tabQuery` {`string`} - query selector for tabs\noverride this for custom elements that extend a11y-tabs\n\n  * `tabs` - array of tabs\n\n  * `vertical` {`boolean`} - determines whether tabs should be in vertical layout\n\n  * `fullWidth` {`boolean`} - if tabs should be full width or not\n\n  * `disabled` {`boolean`} - whether tabbed interface is disabled\n\n  * `hidden` {`boolean`} - whether tabbed interface is hidden\n\n  * `__tabs` {`any[]`} - an array of tab data based on slotted `a11y-tab` elements\n\n  * `__tabFocus` {`number`} - which tab button has ketboard focus\n\n  * `responsiveWidth` {`number`} - width in pixels\n\n  * `responsiveSize` {`string`} - size of tabs,\nwhere `xs` is smaller breakpoint\nand `xs` is larger breakpoint\n\n  * `sm` {`number`} - Miniumum value for small breakpoint\n\n  * `md` {`number`} - Miniumum value for medium breakpoint\n\n  * `lg` {`number`} - Miniumum value for large breakpoint\n\n  * `xl` {`number`} - Miniumum value for extra-large breakpoint\n\n  * `disableResponsive` {`boolean`} - ",
      "attributes": [
        {
          "name": "aria-label",
          "description": "`aria-label` {`string`} - \n\nProperty: ariaLabel"
        },
        {
          "name": "active-tab",
          "description": "`active-tab` {`string`} - id of active tab\n\nProperty: activeTab"
        },
        {
          "name": "icon-breakpoint",
          "description": "`icon-breakpoint` {`number`} - Optional minimum breakpoint for showing tab text with icons, or\nDefault is always text with icons.\n`-1` forces icon-only mode.\n\nProperty: iconBreakpoint"
        },
        {
          "name": "id",
          "description": "`id` {`string`} - unique identifier/anchor for tabbed interface\n\nProperty: id"
        },
        {
          "name": "layout-breakpoint",
          "description": "`layout-breakpoint` {`number`} - Optional minimum breakpoint for horizontal layout of tabs.\nDefault is unset (always horizontal).\n`-1` forces vertical-only mode.\n\nProperty: layoutBreakpoint"
        },
        {
          "name": "sticky",
          "description": "`sticky` {`boolean`} - whether tabs are sticky\n\nProperty: sticky",
          "valueSet": "v"
        },
        {
          "name": "__tabButtons",
          "description": "`__tabButtons` {`any[]`} - an array of tab buttons\n\nProperty: __tabButtons"
        },
        {
          "name": "full-width",
          "description": "`full-width` {`boolean`} - if tabs should be full width or not\n\nProperty: fullWidth\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - whether tabbed interface is disabled\n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "hidden",
          "description": "`hidden` {`boolean`} - whether tabbed interface is hidden\n\nProperty: hidden\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "__tabs",
          "description": "`__tabs` {`any[]`} - an array of tab data based on slotted `a11y-tab` elements\n\nProperty: __tabs\n\nDefault: "
        },
        {
          "name": "__tabFocus",
          "description": "`__tabFocus` {`number`} - which tab button has ketboard focus\n\nProperty: __tabFocus\n\nDefault: 0"
        },
        {
          "name": "responsive-width",
          "description": "`responsive-width` {`number`} - width in pixels\n\nProperty: responsiveWidth"
        },
        {
          "name": "responsive-size",
          "description": "`responsive-size` {`string`} - size of tabs,\nwhere `xs` is smaller breakpoint\nand `xs` is larger breakpoint\n\nProperty: responsiveSize\n\nDefault: xs"
        },
        {
          "name": "sm",
          "description": "`sm` {`number`} - Miniumum value for small breakpoint\n\nProperty: sm\n\nDefault: 600"
        },
        {
          "name": "md",
          "description": "`md` {`number`} - Miniumum value for medium breakpoint\n\nProperty: md\n\nDefault: 900"
        },
        {
          "name": "lg",
          "description": "`lg` {`number`} - Miniumum value for large breakpoint\n\nProperty: lg\n\nDefault: 1200"
        },
        {
          "name": "xl",
          "description": "`xl` {`number`} - Miniumum value for extra-large breakpoint\n\nProperty: xl\n\nDefault: 1500"
        },
        {
          "name": "onactive-tab-changed",
          "description": "`active-tab-changed` {`CustomEvent<this>`} - "
        },
        {
          "name": "onresponsive-element",
          "description": "`responsive-element` {`CustomEvent<{ attribute: string; custom: string; element: this; sm: number; md: number; lg: number; xl: number; }>`} - "
        },
        {
          "name": "onresponsive-element-deleted",
          "description": "`responsive-element-deleted` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "simple-fields-upload",
      "description": "`simple-fields-upload` takes in a JSON schema of type array and builds a form,\nexposing a `value` property that represents an array described by the schema.\n\nEvents:\n\n  * `value-changed` {`CustomEvent<{ value: any; }>`} - \n\n  * `upload-before` {`CustomEvent<any>`} - \n\n  * `upload-response` {`CustomEvent<any>`} - \n\nAttributes:\n\n  * `description` {`string`} - \n\n  * `value` {`string`} - \n\n  * `option` {`string`} - \n\n  * `label` {`string`} - \n\n  * `no-camera` {`boolean`} - Used when we want to ensure there is not a web cam option like video upload.\n\n  * `options` {`any[]`} - \n\n  * `no-voice-record` {`boolean`} - No Voice Recording\n\n  * `accent-color` {`string`} - a selected accent-\"color\": grey, red, pink, purple, etc.\n\n  * `dark` {`boolean`} - make the default theme dark?\n\nProperties:\n\n  * `description` {`string`} - \n\n  * `value` {`string`} - \n\n  * `option` {`string`} - \n\n  * `label` {`string`} - \n\n  * `noCamera` {`boolean`} - Used when we want to ensure there is not a web cam option like video upload.\n\n  * `options` {`any[]`} - \n\n  * `noVoiceRecord` {`boolean`} - No Voice Recording\n\n  * `accentColor` {`string`} - a selected accent-\"color\": grey, red, pink, purple, etc.\n\n  * `dark` {`boolean`} - make the default theme dark?\n\n  * `colors` - ",
      "attributes": [
        {
          "name": "description",
          "description": "`description` {`string`} - \n\nProperty: description"
        },
        {
          "name": "value",
          "description": "`value` {`string`} - \n\nProperty: value"
        },
        {
          "name": "option",
          "description": "`option` {`string`} - \n\nProperty: option"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - \n\nProperty: label\n\nDefault: null"
        },
        {
          "name": "no-camera",
          "description": "`no-camera` {`boolean`} - Used when we want to ensure there is not a web cam option like video upload.\n\nProperty: noCamera\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "options",
          "description": "`options` {`any[]`} - \n\nProperty: options\n\nDefault: "
        },
        {
          "name": "no-voice-record",
          "description": "`no-voice-record` {`boolean`} - No Voice Recording\n\nProperty: noVoiceRecord\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "accent-color",
          "description": "`accent-color` {`string`} - a selected accent-\"color\": grey, red, pink, purple, etc.\n\nProperty: accentColor\n\nDefault: grey"
        },
        {
          "name": "dark",
          "description": "`dark` {`boolean`} - make the default theme dark?\n\nProperty: dark\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "onvalue-changed",
          "description": "`value-changed` {`CustomEvent<{ value: any; }>`} - "
        },
        {
          "name": "onupload-before",
          "description": "`upload-before` {`CustomEvent<any>`} - "
        },
        {
          "name": "onupload-response",
          "description": "`upload-response` {`CustomEvent<any>`} - "
        }
      ]
    },
    {
      "name": "simple-fields",
      "description": "`simple-fields`\nUses JSON Schema to display a series of fields\n\n### Styling\n`<simple-fields>` provides following custom properties\nfor styling:\n\nCustom property | Description | Default\n----------------|-------------|--------\n`--simple-fields-margin` | vertical margin around container | 16px\n`--simple-fields-margin-small` | smaller vertical margin above field itself | 8px\n`--simple-fields-border-radus` | default border-radius | 2px\n`--simple-fields-color` | text color | black\n`--simple-fields-error-color` | error text color | #dd2c00\n`--simple-fields-accent-color` | accent text/underline color | #3f51b5\n`--simple-fields-border-color` | border-/underline color | #999\n`--simple-fields-border-color-light` | used for range tracks | #ccc\n`--simple-fields-faded-error-color` | used for range tracks | #ff997f\n\n#### Field text\nCustom property | Description | Default\n----------------|-------------|--------\n`--simple-fields-font-size` | font-size of field | 16px\n`--simple-fields-font-family` | font-size of field | sans-serif\n`--simple-fields-line-height` | line-height of field | 22px\n\n#### Detail text\nCustom property | Description | Default\n----------------|-------------|--------\n`--simple-fields-detail-font-size` | font-size of field details | 12px\n`--simple-fields-detail-font-family` | font-size of field details | sans-serif\n`--simple-fields-detail-line-height` | line-height of field details | 22px\n\n#### Disabled Fields\nCustom property | Description | Default\n----------------|-------------|--------\n`--simple-fields-disabled-color` | disabled text color | #999\n`--simple-fields-disabled-opacity` | opacity for disabled field | 0.7\n\n#### Radio Buttons and Checkboxes\nCustom property | Description | Default\n----------------|-------------|--------\n`--simple-fields-radio-option-display` | display label with field (flex) or above (block) | flex\n`--simple-fields-radio-option-flex-wrap` | allow radio options to wrap to next line | wrap\n\n### Configuring schemaConversion Property\nYou can customise elements from JSON schema conversion by setting `schemaConversion` property.\n```\ntype: {                                       //For properties in \"this.schema\", define elements based on a property's \"type\"\nobject: {                                   //Defines element used when property's \"type\" is an \"object\"\n  format: {                                 //Optional: define elements for \"object\" properties by \"format\"\n    \"tabs\": {                               //Defines element used for object properties when \"format\" is \"tabs\"\n      element: \"a11y-tabs\"                  //Element to create, eg. \"paper-input\", \"select\", \"simple-fields-array\", etc.\n      descriptionProperty: \"description\"    //Optional: element's property that sets its description, e.g. \"description\"\n      descriptionSlot: \"description\"        //Optional: element's slot that contains its description, e.g. \"description\"\n      errorProperty: \"error\"                //Optional: element's property that sets its error status, e.g. \"error\"\n      errorChangedProperty: \"error\"         //Optional: event element fires when error status changes, e.g. \"error-changed\"\n      errorMessageProperty: \"errorMessage\"  //Optional: element's property that sets its error message, e.g. \"errorMessage\"\n      errorMessageSlot: \"errorMessage\"      //Optional: element's slot that contains its error message, e.g. \"errorMessage\"\n      labelProperty: \"label\"                //Optional: element's property that sets its label, e.g. \"label\"\n      labelSlot: \"label\"                    //Optional: element's slot that contains its label, e.g. \"label\"\n      valueProperty: \"value\"                //Optional: element's property that gets its value, e.g. \"value\" or \"checked\"\n      setValueProperty: \"value\"             //Optional: element's property that sets its value, e.g. \"value\" or \"checked\" (default is same as valueProperty)\n      valueChangedProperty: \"value-changed\" //Optional: event element fires when value property changes, e.g. \"value-changed\" or \"click\"\n      valueSlot: \"\"                         //Optional: element's slot that's used to set its value, e.g. \"\"\n      description: \"\"                       //Optional: element that contains description, e.g. \"p\", \"span\", \"paper-tooltip\", etc.\n      child: {                              //Optional: child elements to be appended\n        element: \"a11y-tab\"                 //Optional: type of child element, eg. \"paper-input\", \"select\", \"simple-fields-array\", etc.\n        attributes: {                       //Optional: sets child element's attributes based on this.schemaConversion\n          disabled: true                    //Example: sets disabled to true  \n        } \n        properties: {                       //Optional: sets child element's attributes based on this.schema properties\n          icon: \"iconName\"                  //Example: sets child element's icon property to this.schema property's iconName \n        }, \n        slots: {                            //Optional: inserts schema properties in child element's slots\n          label: \"label\",                   //Example: places schema property's label into child element's label slot\n          \"\": \"description\"                 //Example: places schema property's description into child element's unnamed slot\n        } \n      },\n      attributes: {},\n      properties: {},\n      slots: {}\n    }\n  },\n  defaultSettings: {                        //Default element used for object properties\n    element: \"\"\n    label: \"\"\n    description: \"\"     \n    attributes: {}       \n    properties: {}       \n    slots: {}           \n  }\n}\n}\n``` \n### Configuring fieldsConversion Property\nYou can customise fields to JSON schema conversion by setting `fieldsConversion` property.\n```\ndefaultSettings: {            //default JSON schema type if no type is matched\ntype: \"string\"              //sets JSON schema type to string\n},\ninputMethod: {                //for fields in \"this.fields\", define elements based on a property's \"inputMethod\"\ncolorpicker: {              //settings if inputMethod is color picker\n  defaultSettings: {        //default colorpicker settings\n    type: \"string\",         //sets JSON schema type to string\n    format: \"color\"         //sets JSON schema format to color\n  }\n}\n}\n```\n\nEvents:\n\n  * `active-tabs-changed` {`CustomEvent<this>`} - \n\n  * `value-changed` {`CustomEvent<this>`} - \n\n  * `fields-changed` {`CustomEvent<this>`} - \n\n  * `schema-changed` {`CustomEvent<this>`} - \n\nAttributes:\n\n  * `fields` {`any[]`} - Fields to convert to JSON Schema.\n\n  * `schematizer` - Conversion from fields array with inputMethods to JSON schema types and formats.\n_See [Configuring fieldsConversion Property](configuring-the-fieldsconversion-property) above._\n\n  * `label` {`string`} - Schema label\n\n  * `active-path` - tracks all activeTabs as an object\n\n  * `disable-responsive` {`boolean`} - \n\n  * `error` - Error messages by field name,\neg. `{ contactinfo.email: \"A valid email is required.\" }`\n\n  * `elementizer` - Conversion from JSON Schema to HTML form elements.\n_See [Configuring schemaConversion Property](configuring-the-schemaConversion-property) above._\n\n  * `disableAutofocus` {`boolean`} - Disables autofocus on fields.\n\n  * `lang` {`string`} - Language of the fields.\n\n  * `resources` - resource link\n\n  * `__formElements` - form elements by id and config data in schema\n\n  * `__formElementsArray` {`any[]`} - list form elements in order and config data in schema\n\n  * `schema` - Fields schema.\n_See [Fields Schema Format](fields-schema-format) above._\n\n  * `value` - value of fields\n\nProperties:\n\n  * `fields` {`any[]`} - Fields to convert to JSON Schema.\n\n  * `schematizer` - Conversion from fields array with inputMethods to JSON schema types and formats.\n_See [Configuring fieldsConversion Property](configuring-the-fieldsconversion-property) above._\n\n  * `label` {`string`} - Schema label\n\n  * `__activeTabs` - tracks all activeTabs as an object\n\n  * `convertedSchema` {`{ $schema: string; title: any; type: string; required: never[]; properties: {}; }`} - fields converted to JSON schema =\n\n  * `fieldsConversion` - gets fields array to JSON schema conversion object\n\n  * `activeTabs` - \n\n  * `disableResponsive` {`boolean`} - \n\n  * `error` - Error messages by field name,\neg. `{ contactinfo.email: \"A valid email is required.\" }`\n\n  * `elementizer` - Conversion from JSON Schema to HTML form elements.\n_See [Configuring schemaConversion Property](configuring-the-schemaConversion-property) above._\n\n  * `formElements` - form elements by id\n\n  * `formElementsArray` {`any[]`} - list of form elements in order\n\n  * `schemaConversion` - gets JSON schema to form element conversion object\n\n  * `valid` {`boolean`} - whether there are no errors\n\n  * `disableAutofocus` {`boolean`} - Disables autofocus on fields.\n\n  * `language` {`string`} - Language of the fields.\n\n  * `resources` - resource link\n\n  * `__formElements` - form elements by id and config data in schema\n\n  * `__formElementsArray` {`any[]`} - list form elements in order and config data in schema\n\n  * `schema` - Fields schema.\n_See [Fields Schema Format](fields-schema-format) above._\n\n  * `value` - value of fields",
      "attributes": [
        {
          "name": "fields",
          "description": "`fields` {`any[]`} - Fields to convert to JSON Schema.\n\nProperty: fields"
        },
        {
          "name": "schematizer",
          "description": "`schematizer` - Conversion from fields array with inputMethods to JSON schema types and formats.\n_See [Configuring fieldsConversion Property](configuring-the-fieldsconversion-property) above._\n\nProperty: schematizer"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Schema label\n\nProperty: label"
        },
        {
          "name": "active-path",
          "description": "`active-path` - tracks all activeTabs as an object\n\nProperty: __activeTabs"
        },
        {
          "name": "disable-responsive",
          "description": "`disable-responsive` {`boolean`} - \n\nProperty: disableResponsive\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "error",
          "description": "`error` - Error messages by field name,\neg. `{ contactinfo.email: \"A valid email is required.\" }`\n\nProperty: error"
        },
        {
          "name": "elementizer",
          "description": "`elementizer` - Conversion from JSON Schema to HTML form elements.\n_See [Configuring schemaConversion Property](configuring-the-schemaConversion-property) above._\n\nProperty: elementizer"
        },
        {
          "name": "disableAutofocus",
          "description": "`disableAutofocus` {`boolean`} - Disables autofocus on fields.\n\nProperty: disableAutofocus\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "lang",
          "description": "`lang` {`string`} - Language of the fields.\n\nProperty: language\n\nDefault: en"
        },
        {
          "name": "resources",
          "description": "`resources` - resource link\n\nProperty: resources\n\nDefault: [object Object]"
        },
        {
          "name": "__formElements",
          "description": "`__formElements` - form elements by id and config data in schema\n\nProperty: __formElements\n\nDefault: [object Object]"
        },
        {
          "name": "__formElementsArray",
          "description": "`__formElementsArray` {`any[]`} - list form elements in order and config data in schema\n\nProperty: __formElementsArray\n\nDefault: "
        },
        {
          "name": "schema",
          "description": "`schema` - Fields schema.\n_See [Fields Schema Format](fields-schema-format) above._\n\nProperty: schema\n\nDefault: [object Object]"
        },
        {
          "name": "value",
          "description": "`value` - value of fields\n\nProperty: value\n\nDefault: [object Object]"
        },
        {
          "name": "onactive-tabs-changed",
          "description": "`active-tabs-changed` {`CustomEvent<this>`} - "
        },
        {
          "name": "onvalue-changed",
          "description": "`value-changed` {`CustomEvent<this>`} - "
        },
        {
          "name": "onfields-changed",
          "description": "`fields-changed` {`CustomEvent<this>`} - "
        },
        {
          "name": "onschema-changed",
          "description": "`schema-changed` {`CustomEvent<this>`} - "
        }
      ]
    },
    {
      "name": "simple-fields",
      "description": "`simple-fields`\nUses JSON Schema to display a series of fields\n\n### Styling\n`<simple-fields>` provides following custom properties\nfor styling:\n\nCustom property | Description | Default\n----------------|-------------|--------\n`--simple-fields-margin` | vertical margin around container | 16px\n`--simple-fields-margin-small` | smaller vertical margin above field itself | 8px\n`--simple-fields-border-radus` | default border-radius | 2px\n`--simple-fields-color` | text color | black\n`--simple-fields-error-color` | error text color | #dd2c00\n`--simple-fields-accent-color` | accent text/underline color | #3f51b5\n`--simple-fields-border-color` | border-/underline color | #999\n`--simple-fields-border-color-light` | used for range tracks | #ccc\n`--simple-fields-faded-error-color` | used for range tracks | #ff997f\n\n#### Field text\nCustom property | Description | Default\n----------------|-------------|--------\n`--simple-fields-font-size` | font-size of field | 16px\n`--simple-fields-font-family` | font-size of field | sans-serif\n`--simple-fields-line-height` | line-height of field | 22px\n\n#### Detail text\nCustom property | Description | Default\n----------------|-------------|--------\n`--simple-fields-detail-font-size` | font-size of field details | 12px\n`--simple-fields-detail-font-family` | font-size of field details | sans-serif\n`--simple-fields-detail-line-height` | line-height of field details | 22px\n\n#### Disabled Fields\nCustom property | Description | Default\n----------------|-------------|--------\n`--simple-fields-disabled-color` | disabled text color | #999\n`--simple-fields-disabled-opacity` | opacity for disabled field | 0.7\n\n#### Radio Buttons and Checkboxes\nCustom property | Description | Default\n----------------|-------------|--------\n`--simple-fields-radio-option-display` | display label with field (flex) or above (block) | flex\n`--simple-fields-radio-option-flex-wrap` | allow radio options to wrap to next line | wrap\n\n### Configuring schemaConversion Property\nYou can customise elements from JSON schema conversion by setting `schemaConversion` property.\n```\ntype: {                                       //For properties in \"this.schema\", define elements based on a property's \"type\"\nobject: {                                   //Defines element used when property's \"type\" is an \"object\"\n  format: {                                 //Optional: define elements for \"object\" properties by \"format\"\n    \"tabs\": {                               //Defines element used for object properties when \"format\" is \"tabs\"\n      element: \"a11y-tabs\"                  //Element to create, eg. \"paper-input\", \"select\", \"simple-fields-array\", etc.\n      descriptionProperty: \"description\"    //Optional: element's property that sets its description, e.g. \"description\"\n      descriptionSlot: \"description\"        //Optional: element's slot that contains its description, e.g. \"description\"\n      errorProperty: \"error\"                //Optional: element's property that sets its error status, e.g. \"error\"\n      errorChangedProperty: \"error\"         //Optional: event element fires when error status changes, e.g. \"error-changed\"\n      errorMessageProperty: \"errorMessage\"  //Optional: element's property that sets its error message, e.g. \"errorMessage\"\n      errorMessageSlot: \"errorMessage\"      //Optional: element's slot that contains its error message, e.g. \"errorMessage\"\n      labelProperty: \"label\"                //Optional: element's property that sets its label, e.g. \"label\"\n      labelSlot: \"label\"                    //Optional: element's slot that contains its label, e.g. \"label\"\n      valueProperty: \"value\"                //Optional: element's property that gets its value, e.g. \"value\" or \"checked\"\n      setValueProperty: \"value\"             //Optional: element's property that sets its value, e.g. \"value\" or \"checked\" (default is same as valueProperty)\n      valueChangedProperty: \"value-changed\" //Optional: event element fires when value property changes, e.g. \"value-changed\" or \"click\"\n      valueSlot: \"\"                         //Optional: element's slot that's used to set its value, e.g. \"\"\n      description: \"\"                       //Optional: element that contains description, e.g. \"p\", \"span\", \"paper-tooltip\", etc.\n      child: {                              //Optional: child elements to be appended\n        element: \"a11y-tab\"                 //Optional: type of child element, eg. \"paper-input\", \"select\", \"simple-fields-array\", etc.\n        attributes: {                       //Optional: sets child element's attributes based on this.schemaConversion\n          disabled: true                    //Example: sets disabled to true  \n        } \n        properties: {                       //Optional: sets child element's attributes based on this.schema properties\n          icon: \"iconName\"                  //Example: sets child element's icon property to this.schema property's iconName \n        }, \n        slots: {                            //Optional: inserts schema properties in child element's slots\n          label: \"label\",                   //Example: places schema property's label into child element's label slot\n          \"\": \"description\"                 //Example: places schema property's description into child element's unnamed slot\n        } \n      },\n      attributes: {},\n      properties: {},\n      slots: {}\n    }\n  },\n  defaultSettings: {                        //Default element used for object properties\n    element: \"\"\n    label: \"\"\n    description: \"\"     \n    attributes: {}       \n    properties: {}       \n    slots: {}           \n  }\n}\n}\n``` \n### Configuring fieldsConversion Property\nYou can customise fields to JSON schema conversion by setting `fieldsConversion` property.\n```\ndefaultSettings: {            //default JSON schema type if no type is matched\ntype: \"string\"              //sets JSON schema type to string\n},\ninputMethod: {                //for fields in \"this.fields\", define elements based on a property's \"inputMethod\"\ncolorpicker: {              //settings if inputMethod is color picker\n  defaultSettings: {        //default colorpicker settings\n    type: \"string\",         //sets JSON schema type to string\n    format: \"color\"         //sets JSON schema format to color\n  }\n}\n}\n```\n\nEvents:\n\n  * `active-tabs-changed` {`CustomEvent<this>`} - \n\nProperties:\n\n  * `convertedSchema` {`{ $schema: string; title: any; type: string; required: never[]; properties: {}; }`} - fields converted to JSON schema =\n\n  * `schemaConversion` - gets JSON schema to form element conversion object\n\n  * `fieldsConversion` - gets fields array to JSON schema conversion object\n\n  * `activeTabs` - \n\n  * `disableResponsive` {`boolean`} - ",
      "attributes": [
        {
          "name": "onactive-tabs-changed",
          "description": "`active-tabs-changed` {`CustomEvent<this>`} - "
        }
      ]
    }
  ],
  "globalAttributes": [],
  "valueSets": []
}
