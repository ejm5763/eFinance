{
  "schema_version": "1.0.0",
  "classes": [
    {
      "description": "`simple-fields-container`\nProgressive enhanced container HTML fields\nwith label, description, error massage,\nand aria-invalid functionality if needed.",
      "summary": "",
      "path": "lib/simple-fields-container.js",
      "properties": [
        {
          "name": "descriptionTemplate",
          "type": "object",
          "description": "template for slotted or shadow DOM description",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 428,
              "column": 2
            },
            "end": {
              "line": 435,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "errorTemplate",
          "type": "object",
          "description": "template for slotted or shadow DOM error message",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 444,
              "column": 2
            },
            "end": {
              "line": 450,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "fieldBottom",
          "type": "object",
          "description": "gets bottom (metadata, description, and error message) of a field",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 460,
              "column": 2
            },
            "end": {
              "line": 471,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "fieldId",
          "type": "string",
          "description": "gets field's id",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 480,
              "column": 2
            },
            "end": {
              "line": 482,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "fieldMainTemplate",
          "type": "object",
          "description": "template for slotted or shadow DOM label",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 491,
              "column": 2
            },
            "end": {
              "line": 507,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "fieldMeta",
          "type": "object",
          "description": "gets field metadata",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 516,
              "column": 2
            },
            "end": {
              "line": 522,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "hasFieldset",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 524,
              "column": 2
            },
            "end": {
              "line": 526,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "labelTemplate",
          "type": "object",
          "description": "template for slotted or shadow DOM label",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 535,
              "column": 2
            },
            "end": {
              "line": 547,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "multicheck",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 548,
              "column": 2
            },
            "end": {
              "line": 550,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "numberError",
          "type": "?",
          "description": "determines if number of items selected\nis not between min and max",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 559,
              "column": 2
            },
            "end": {
              "line": 576,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "numeric",
          "type": "boolean",
          "description": "determines if field is numeric",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 585,
              "column": 2
            },
            "end": {
              "line": 595,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "patternError",
          "type": "?",
          "description": "determines if value does not match regex pattern",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 602,
              "column": 2
            },
            "end": {
              "line": 611,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "prefixTemplate",
          "type": "object",
          "description": "template for slotted or shadow DOM prefix",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 620,
              "column": 2
            },
            "end": {
              "line": 625,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "requiredError",
          "type": "?",
          "description": "determines if field is required and blank",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 632,
              "column": 2
            },
            "end": {
              "line": 634,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "slottedFieldObserver",
          "type": "object",
          "description": "mutation observer that updates field property with slotted field\noverride for shadow DOM field",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 644,
              "column": 2
            },
            "end": {
              "line": 646,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "suffixTemplate",
          "type": "object",
          "description": "template for slotted or shadow DOM suffix",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 655,
              "column": 2
            },
            "end": {
              "line": 660,
              "column": 3
            }
          },
          "metadata": {}
        }
      ],
      "methods": [
        {
          "name": "render",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 373,
              "column": 2
            },
            "end": {
              "line": 376,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "autoGrow",
          "description": "makes a field autogrow",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 383,
              "column": 2
            },
            "end": {
              "line": 391,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "field",
              "defaultValue": "this.field"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "firstUpdated",
          "description": "updates slotted field",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 397,
              "column": 2
            },
            "end": {
              "line": 400,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProperties"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "updated",
          "description": "updates for slotted input\noverrride for shadow DOM",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 408,
              "column": 2
            },
            "end": {
              "line": 419,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProperties",
              "type": "*"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "focus",
          "description": "focuses on field",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 665,
              "column": 2
            },
            "end": {
              "line": 667,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "select",
          "description": "selects all text",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 673,
              "column": 2
            },
            "end": {
              "line": 676,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "setRangeText",
          "description": "replaces a range of text",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 690,
              "column": 2
            },
            "end": {
              "line": 693,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "replacement",
              "type": "string",
              "description": "string to insert"
            },
            {
              "name": "start"
            },
            {
              "name": "end"
            },
            {
              "name": "selectMode"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "setSelectionRange",
          "description": "selects a range of text",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 703,
              "column": 2
            },
            "end": {
              "line": 710,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selectionStart"
            },
            {
              "name": "selectionEnd"
            },
            {
              "name": "selectionDirection"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "stepDown",
          "description": "decrements by a multiple of step",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 717,
              "column": 2
            },
            "end": {
              "line": 719,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n",
              "defaultValue": "1"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "stepUp",
          "description": "increments by a multiple of step",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 727,
              "column": 2
            },
            "end": {
              "line": 729,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "n",
              "defaultValue": "1"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "validate",
          "description": "checks validation constraints and returns error data",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 735,
              "column": 2
            },
            "end": {
              "line": 763,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_fireErrorChanged",
          "description": "fires when error changes",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 769,
              "column": 2
            },
            "end": {
              "line": 778,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_generateUUID",
          "description": "generates a unique id",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 783,
              "column": 2
            },
            "end": {
              "line": 790,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "string",
            "desc": "unique id"
          }
        },
        {
          "name": "_getFieldsetValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 792,
              "column": 2
            },
            "end": {
              "line": 803,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getFieldValue",
          "description": "gets the value of a field based on field type",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 810,
              "column": 2
            },
            "end": {
              "line": 830,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getValidType",
          "description": "gets a valid version of a given type",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 838,
              "column": 2
            },
            "end": {
              "line": 845,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "string"
            }
          ],
          "return": {
            "type": "string"
          }
        },
        {
          "name": "_handleFieldChange",
          "description": "handles field changes by field type",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 851,
              "column": 2
            },
            "end": {
              "line": 856,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_observeAndListen",
          "description": "observes slotted field and listens for focusout\noverride for fields in shadow DOM",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 864,
              "column": 2
            },
            "end": {
              "line": 880,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "init",
              "defaultValue": "true"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onFocusin",
          "description": "handles focusout validation",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 886,
              "column": 2
            },
            "end": {
              "line": 888,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onFocusout",
          "description": "handles focusout validation",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 894,
              "column": 2
            },
            "end": {
              "line": 896,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updateField",
          "description": "updates field an type",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 903,
              "column": 2
            },
            "end": {
              "line": 963,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updateCount",
          "description": "updates counter and sets maximum word count",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 970,
              "column": 2
            },
            "end": {
              "line": 1005,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "./demo/container.html",
          "description": ""
        },
        {
          "url": "./demo/container.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 11,
          "column": 0
        },
        "end": {
          "line": 1006,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "LitElement",
      "name": "SimpleFieldsContainer"
    },
    {
      "description": "`simple-fields-fieldset` takes in a JSON schema of type fieldset and builds a form,\nexposing a `value` property that represents an array described by the schema.",
      "summary": "",
      "path": "lib/simple-fields-fieldset.js",
      "properties": [
        {
          "name": "legend",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 49,
              "column": 2
            },
            "end": {
              "line": 55,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "desc",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 2
            },
            "end": {
              "line": 62,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "fields",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 69,
              "column": 3
            }
          },
          "metadata": {}
        }
      ],
      "methods": [
        {
          "name": "render",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 2
            },
            "end": {
              "line": 48,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 123,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "LitElement",
      "name": "SimpleFieldsFieldset"
    },
    {
      "description": "`simple-fields-array-item`\nan accessible expand collapse\n\n### Styling\n\n`<simple-fields-array-item>` provides the following custom properties\nfor styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--simple-fields-array-item-margin` | margin around simple-fields-array-item | 15px 0\n`--simple-fields-array-item-border` | border around simple-fields-array-item | 1px solid\n`--simple-fields-array-item-horizontal-padding` | horizontal padding inside simple-fields-array-item | 16px\n`--simple-fields-array-item-horizontal-padding-left` | left padding inside simple-fields-array-item | `--simple-fields-array-item-horizontal-padding`\n`--simple-fields-array-item-horizontal-padding-right` | right padding inside simple-fields-array-item | `--simple-fields-array-item-horizontal-padding`\n`--simple-fields-array-item-vertical-padding` | vertical padding inside simple-fields-array-item | 16px\n`--simple-fields-array-item-horizontal-padding-top` | top padding inside simple-fields-array-item | `--simple-fields-array-item-vertical-padding`\n`--simple-fields-array-item-horizontal-padding-bottom` | bottom padding inside simple-fields-array-item | --simple-fields-array-item-vertical-padding\n`--simple-fields-array-item-border-between` | border between simple-fields-array-item heading and content | --simple-fields-array-item-border\n`--simple-fields-array-item-heading-font-weight` | font-weight for simple-fields-array-item heading | bold\n`--simple-fields-array-item-heading-color` | text color for simple-fields-array-item heading | unset\n`--simple-fields-array-item-heading-background-color` | background-color for simple-fields-array-item heading | unset",
      "summary": "",
      "path": "lib/simple-fields-array-item.js",
      "properties": [
        {
          "name": "legend",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "simple-fields-fieldset.js",
            "start": {
              "line": 49,
              "column": 2
            },
            "end": {
              "line": 55,
              "column": 3
            }
          },
          "metadata": {},
          "inheritedFrom": "SimpleFieldsFieldset"
        },
        {
          "name": "desc",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "simple-fields-fieldset.js",
            "start": {
              "line": 56,
              "column": 2
            },
            "end": {
              "line": 62,
              "column": 3
            }
          },
          "metadata": {},
          "inheritedFrom": "SimpleFieldsFieldset"
        },
        {
          "name": "fields",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "simple-fields-fieldset.js",
            "start": {
              "line": 63,
              "column": 2
            },
            "end": {
              "line": 69,
              "column": 3
            }
          },
          "metadata": {},
          "inheritedFrom": "SimpleFieldsFieldset"
        },
        {
          "name": "slots",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 254,
              "column": 2
            },
            "end": {
              "line": 258,
              "column": 3
            }
          },
          "metadata": {}
        }
      ],
      "methods": [
        {
          "name": "render",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 2
            },
            "end": {
              "line": 167,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 229,
              "column": 2
            },
            "end": {
              "line": 246,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "updated",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 247,
              "column": 2
            },
            "end": {
              "line": 253,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProperties"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "toggle",
          "description": "handles individual toggling",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 262,
              "column": 2
            },
            "end": {
              "line": 268,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleCopy",
          "description": "Fires add event",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 274,
              "column": 2
            },
            "end": {
              "line": 283,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleRemove",
          "description": "Fires add event",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 289,
              "column": 2
            },
            "end": {
              "line": 298,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "disconnectedCallback",
          "description": "Let the group know that this is gone.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 303,
              "column": 2
            },
            "end": {
              "line": 318,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "./demo/schema.html",
          "description": "Schema"
        },
        {
          "url": "./demo/form.html",
          "description": "Form"
        },
        {
          "url": "./demo/schema.html",
          "description": "Schema"
        },
        {
          "url": "./demo/form.html",
          "description": "Form"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 33,
          "column": 0
        },
        "end": {
          "line": 319,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "SimpleFieldsFieldset",
      "name": "SimpleFieldsArrayItem"
    },
    {
      "description": "`simple-fields-array` takes in a JSON schema of type array and builds a form,\nexposing a `value` property that represents an array described by the schema.",
      "summary": "",
      "path": "lib/simple-fields-array.js",
      "properties": [
        {
          "name": "fields",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 2
            },
            "end": {
              "line": 110,
              "column": 3
            }
          },
          "metadata": {}
        }
      ],
      "methods": [
        {
          "name": "render",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 78,
              "column": 2
            },
            "end": {
              "line": 80,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "updated",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 2
            },
            "end": {
              "line": 124,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProperties"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "buildItem",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 2
            },
            "end": {
              "line": 136,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id"
            }
          ]
        },
        {
          "name": "_handleAdd",
          "description": "Fires add event",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 142,
              "column": 2
            },
            "end": {
              "line": 151,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleRemove",
          "description": "Fires add event",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 2
            },
            "end": {
              "line": 168,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "collapse",
          "description": "Collapses the content",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 172,
              "column": 2
            },
            "end": {
              "line": 174,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "expand",
          "description": "Expands the content",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 2
            },
            "end": {
              "line": 181,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "focus",
          "description": "handles focus",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 187,
              "column": 2
            },
            "end": {
              "line": 201,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "index"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "toggle",
          "description": "Toggles based on mode",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 207,
              "column": 2
            },
            "end": {
              "line": 210,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "open",
              "type": "boolean",
              "defaultValue": "!this.expanded",
              "description": "whether to toggle open"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleToggle",
          "description": "Fires toggling events",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 215,
              "column": 2
            },
            "end": {
              "line": 255,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 13,
          "column": 0
        },
        "end": {
          "line": 256,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "simple-fields-fieldset",
      "name": "SimpleFieldsArray"
    },
    {
      "description": "`simple-fields-lite`\nUses JSON Schema of fields to display a series of fields\n\n### Styling\n`<simple-fields-lite>` provides following custom properties\nfor styling:\n\nCustom property | Description | Default\n----------------|-------------|--------\n`--simple-fields-margin` | vertical margin around container | 16px\n`--simple-fields-margin-small` | smaller vertical margin above field itself | 8px\n`--simple-fields-border-radius` | default border-radius | 2px\n`--simple-fields-color` | text color | black\n`--simple-fields-background-color` | background color | white\n`--simple-fields-error-color` | error text color | #dd2c00\n`--simple-fields-accent-color` | accent text/underline color | #3f51b5\n`--simple-fields-border-color` | border-/underline color | #999\n\n#### Field text\nCustom property | Description | Default\n----------------|-------------|--------\n`--simple-fields-font-size` | font-size of field | 16px\n`--simple-fields-font-family` | font-size of field | sans-serif\n`--simple-fields-line-height` | line-height of field | 22px\n\n#### Detail text\nCustom property | Description | Default\n----------------|-------------|--------\n`--simple-fields-detail-font-size` | font-size of field details | 12px\n`--simple-fields-detail-font-family` | font-size of field details | sans-serif\n`--simple-fields-detail-line-height` | line-height of field details | 22px\n\n#### Disabled Fields\nCustom property | Description | Default\n----------------|-------------|--------\n`--simple-fields-disabled-color` | disabled text color | #999\n`--simple-fields-disabled-opacity` | opacity for disabled field | 0.7\n\n### JSON Schema Format\nThis element accepts JSON schema with additional features noted in the example below:\n```\n{\n  $schema: \"http://json-schema.org/schema#\",\n  title: \"Store\",\n  type: \"object\",\n  format: \"tabs\",                                 //default object behavior can be overridden by format\n  required: [ \"name\", \"email\" ],\n    properties: {\n      settings: {\n        title: \"Settings\",\n        description: \"Configure the following.\",\n        type: \"object\",\n        format: \"tabs\",\n        properties: {\n          \"basic-input\": {\n            title: \"Basic input page\",\n            description: \"Basic contact settings\",\n            type: \"object\",\n            properties: {\n              branch: {\n                title: \"Branch\",\n                type: \"string\"\n              },\n                name: {\n                  title: \"Name\",\n                  type: \"string\"\n                },\n                address: {\n                  title: \"Address\",\n                  type: \"string\",\n                  minLength: 3\n                },\n                city: {\n                  title: \"City\",\n                  type: \"string\",\n                  minLength: 3\n                },\n                province: {\n                  title: \"Province\",\n                  type: \"string\",\n                  minLength: 2\n                },\n                country: {\n                  title: \"Country\",\n                  type: \"string\",\n                  minLength: 2\n                },\n                postalCode: {\n                  title: \"Postal/Zip Code\",\n                  type: \"string\",\n                  pattern:\n                    \"[a-zA-Z][0-9][a-zA-Z]\\\\s*[0-9][a-zA-Z][0-9]|[0-9]{5}(-[0-9]{4})?\"\n                },\n                email: {\n                  title: \"Email\",\n                  type: \"string\",\n                  pattern:\n                    \"(?:^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}$)|(?:^$)\"\n                },\n                website: {\n                  title: \"Website\",\n                  type: \"string\",\n                  format: \"uri\"\n                },\n                establishedDate: {\n                  title: \"Established Date\",\n                  type: \"string\",\n                  format: \"date\"\n                },\n                closedDate: {\n                  title: \"Closed Date\",\n                  type: [\"string\", \"null\"],\n                  format: \"date\"\n                }\n              }\n            },\n            arrays: {\n            title: \"Basic arrays page\",\n            description: \"Demonstrates arrays\",\n            type: \"object\",\n            properties: {\n              phoneNumbers: {\n                title: \"Phone numbers\",\n                description: \"List phone numbers and type of number.\",\n                type: \"array\",\n                items: {\n                  type: \"object\",\n                  previewBy: [\"phoneNumber\"],                               //simple-fields-array allows a preview field \n                                                                            //for progressive disclosure of array items\n                  properties: {\n                    type: {\n                      title: \"Type\",\n                      type: \"string\"\n                    },\n                    phoneNumber: {\n                      title: \"Phone Number\",\n                      type: \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n```\n\n### Configuring schemaConversion Property\nYou can customise elements from JSON schema conversion by setting `schemaConversion` property.\n```\ntype: {                                       //For properties in \"this.schema\", define elements based on a property's \"type\"\n  object: {                                   //Defines element used when property's \"type\" is an \"object\"\n    format: {                                 //Optional: define elements for \"object\" properties by \"format\"\n      \"tabs\": {                               //Defines element used for object properties when \"format\" is \"tabs\"\n        element: \"a11y-tabs\"                  //Element to create, eg. \"paper-input\", \"select\", \"simple-fields-array\", etc.\n        descriptionProperty: \"description\"    //Optional: element's property that sets its description, e.g. \"description\"\n        descriptionSlot: \"description\"        //Optional: element's slot that contains its description, e.g. \"description\"\n        errorProperty: \"error\"                //Optional: element's property that sets its error status, e.g. \"error\"\n        errorChangedProperty: \"error\"         //Optional: event element fires when error status changes, e.g. \"error-changed\"\n        errorMessageProperty: \"errorMessage\"  //Optional: element's property that sets its error message, e.g. \"errorMessage\"\n        errorMessageSlot: \"errorMessage\"      //Optional: element's slot that contains its error message, e.g. \"errorMessage\"\n        labelProperty: \"label\"                //Optional: element's property that sets its label, e.g. \"label\"\n        labelSlot: \"label\"                    //Optional: element's slot that contains its label, e.g. \"label\"\n        valueProperty: \"value\"                //Optional: element's property that gets its value, e.g. \"value\" or \"checked\"\n        setValueProperty: \"value\"             //Optional: element's property that sets its value, e.g. \"value\" or \"checked\" (default is same as valueProperty)\n        valueChangedProperty: \"value-changed\" //Optional: event element fires when value property changes, e.g. \"value-changed\" or \"click\"\n        valueSlot: \"\"                         //Optional: element's slot that's used to set its value, e.g. \"\"\n        description: \"\"                       //Optional: element that contains description, e.g. \"p\", \"span\", \"paper-tooltip\", etc.\n        child: {                              //Optional: child elements to be appended\n          element: \"a11y-tab\"                 //Optional: type of child element, eg. \"paper-input\", \"select\", \"simple-fields-array\", etc.\n          attributes: {                       //Optional: sets child element's attributes based on this.schemaConversion\n            disabled: true                    //Example: sets disabled to true  \n          } \n          properties: {                       //Optional: sets child element's attributes based on this.schema properties\n            icon: \"iconName\"                  //Example: sets child element's icon property to this.schema property's iconName \n          }, \n          slots: {                            //Optional: inserts schema properties in child element's slots\n            label: \"label\",                   //Example: places schema property's label into child element's label slot\n            \"\": \"description\"                 //Example: places schema property's description into child element's unnamed slot\n          } \n        },\n        attributes: {},\n        properties: {},\n        slots: {}\n      }\n    },\n    defaultSettings: {                        //Default element used for object properties\n      element: \"\"\n      label: \"\"\n      description: \"\"     \n      attributes: {}       \n      properties: {}       \n      slots: {}           \n    }\n  }\n}\n```",
      "summary": "",
      "path": "lib/simple-fields-lite.js",
      "properties": [
        {
          "name": "formElements",
          "type": "?",
          "description": "form elements by id",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 354,
              "column": 2
            },
            "end": {
              "line": 356,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "formElementsArray",
          "type": "?",
          "description": "list of form elements in order",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 363,
              "column": 2
            },
            "end": {
              "line": 365,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "schemaConversion",
          "type": "?",
          "description": "gets JSON schema to form element conversion object",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 372,
              "column": 2
            },
            "end": {
              "line": 514,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "valid",
          "type": "?",
          "description": "whether there are no errors",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 521,
              "column": 2
            },
            "end": {
              "line": 523,
              "column": 3
            }
          },
          "metadata": {}
        }
      ],
      "methods": [
        {
          "name": "render",
          "description": "render function",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 232,
              "column": 2
            },
            "end": {
              "line": 238,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 332,
              "column": 2
            },
            "end": {
              "line": 335,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "updated",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 337,
              "column": 2
            },
            "end": {
              "line": 347,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProperties"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "updateSchema",
          "description": "updates the schema",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 527,
              "column": 2
            },
            "end": {
              "line": 529,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "rebuildForm",
          "description": "clears and rebuilds form",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 534,
              "column": 2
            },
            "end": {
              "line": 544,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "pathFromUrl",
          "description": "simple path from a url modifier",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 555,
              "column": 2
            },
            "end": {
              "line": 557,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url"
            }
          ]
        },
        {
          "name": "_addToForm",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 558,
              "column": 2
            },
            "end": {
              "line": 728,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "schema",
              "defaultValue": "this.schema"
            },
            {
              "name": "target",
              "defaultValue": "this"
            },
            {
              "name": "prefix",
              "defaultValue": "\"\""
            },
            {
              "name": "config"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_configElement",
          "description": "sets field or field wrapper element's slot ot property to a value",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 738,
              "column": 2
            },
            "end": {
              "line": 751,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target",
              "type": "object",
              "description": "element to set"
            },
            {
              "name": "value",
              "type": "*"
            },
            {
              "name": "propName",
              "type": "string",
              "description": "property name"
            },
            {
              "name": "slotName",
              "type": "string",
              "defaultValue": "false",
              "description": "slot name if any"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_insertArrayItem",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 762,
              "column": 2
            },
            "end": {
              "line": 771,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "schema",
              "type": "*"
            },
            {
              "name": "previewBy",
              "type": "*"
            },
            {
              "name": "element",
              "type": "*"
            },
            {
              "name": "parent",
              "type": "*"
            },
            {
              "name": "value"
            },
            {
              "name": "index"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_addArrayItems",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 780,
              "column": 2
            },
            "end": {
              "line": 809,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "*"
            },
            {
              "name": "element",
              "type": "*"
            },
            {
              "name": "schema",
              "type": "*"
            },
            {
              "name": "parent",
              "type": "*"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_addArrayItem",
          "description": "adds an array item given an array item value and array item schema",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 818,
              "column": 2
            },
            "end": {
              "line": 823,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "counter"
            },
            {
              "name": "schema",
              "type": "object",
              "description": "array item's schema"
            },
            {
              "name": "previewBy"
            }
          ]
        },
        {
          "name": "_clearForm",
          "description": "clears form",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 827,
              "column": 2
            },
            "end": {
              "line": 830,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_convertSchema",
          "description": "matches schema property to schemaConversion settings",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 839,
              "column": 2
            },
            "end": {
              "line": 857,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "object",
              "description": "schema property"
            },
            {
              "name": "conversion",
              "type": "object",
              "defaultValue": "this.schemaConversion",
              "description": "section of schemaConversion to search"
            },
            {
              "name": "settings",
              "type": "object",
              "description": "closest current match's defaultSettings object"
            }
          ],
          "return": {
            "type": "object"
          }
        },
        {
          "name": "_deepClone",
          "description": "clones an object and all its subproperties",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 864,
              "column": 2
            },
            "end": {
              "line": 866,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "o",
              "type": "object",
              "description": "object to clone"
            }
          ],
          "return": {
            "type": "object",
            "desc": "cloned object"
          }
        },
        {
          "name": "_errorChanged",
          "description": "handles errors",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 871,
              "column": 2
            },
            "end": {
              "line": 896,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_fireValueChanged",
          "description": "fires when value changes",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 902,
              "column": 2
            },
            "end": {
              "line": 911,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_formFieldsChanged",
          "description": "Fires when form changes to set focus on the first field if this has auto-focus",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 917,
              "column": 2
            },
            "end": {
              "line": 926,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getValue",
          "description": "gets value of a property",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 933,
              "column": 2
            },
            "end": {
              "line": 945,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "propName",
              "type": "string",
              "description": "property to set"
            }
          ],
          "return": {
            "type": "*"
          }
        },
        {
          "name": "_handleChange",
          "description": "handles changes to fields",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 952,
              "column": 2
            },
            "end": {
              "line": 970,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "object",
              "description": "element that changed"
            },
            {
              "name": "valueProperty",
              "type": "object"
            },
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_schemaChanged",
          "description": "updates form and fires event when schema changes",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 978,
              "column": 2
            },
            "end": {
              "line": 992,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue",
              "type": "object",
              "description": "new value for schema"
            },
            {
              "name": "oldValue",
              "type": "object",
              "description": "old value for schema"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_setValue",
          "description": "sets value of a property",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 999,
              "column": 2
            },
            "end": {
              "line": 1011,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "propName",
              "type": "string",
              "description": "property to set"
            },
            {
              "name": "propVal",
              "type": "*",
              "description": "value of property"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_valueChanged",
          "description": "updates form  and fires event when value changes",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1018,
              "column": 2
            },
            "end": {
              "line": 1020,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue",
              "type": "object",
              "description": "new value for schema"
            },
            {
              "name": "oldValue",
              "type": "object",
              "description": "old value for schema"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "./demo/lite.html",
          "description": "Demo"
        },
        {
          "url": "./demo/lite.html",
          "description": "Demo"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 212,
          "column": 0
        },
        "end": {
          "line": 1021,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "LitElement",
      "name": "SimpleFieldsLite"
    },
    {
      "description": "`simple-fields-field`\nHTML inputs (excluding submit, reset, button, and image)\nwith label, description, error massage,\nand aria-invalid functionality if needed.",
      "summary": "",
      "path": "lib/simple-fields-field.js",
      "properties": [
        {
          "name": "hasFieldset",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 457,
              "column": 2
            },
            "end": {
              "line": 461,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "fieldElementTag",
          "type": "string",
          "description": "gets field element tag in shadow DOM",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 470,
              "column": 2
            },
            "end": {
              "line": 478,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "fieldMainTemplate",
          "type": "object",
          "description": "template label and field",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 487,
              "column": 2
            },
            "end": {
              "line": 509,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "fieldMeta",
          "type": "object",
          "description": "gets field metadata",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 518,
              "column": 2
            },
            "end": {
              "line": 520,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "fieldsetTemplate",
          "type": "object",
          "description": "template for `fieldset` in shadow DOM",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 529,
              "column": 2
            },
            "end": {
              "line": 549,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "inputTemplate",
          "type": "object",
          "description": "template for `input` in shadow DOM",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 631,
              "column": 2
            },
            "end": {
              "line": 633,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "multicheck",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 635,
              "column": 2
            },
            "end": {
              "line": 637,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "noOptions",
          "type": "?",
          "description": "gets whether or not the field has options",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 644,
              "column": 2
            },
            "end": {
              "line": 648,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "numberError",
          "type": "?",
          "description": "determines if number of items selected\nis not between min and max",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 657,
              "column": 2
            },
            "end": {
              "line": 664,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "sortedOptions",
          "type": "?",
          "description": "gets a sorted list of option",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 671,
              "column": 2
            },
            "end": {
              "line": 679,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "selectTemplate",
          "type": "object",
          "description": "template for `select` in shadow DOM",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 687,
              "column": 2
            },
            "end": {
              "line": 720,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "slottedFieldObserver",
          "type": "?",
          "description": "overridden mutation observer",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 728,
              "column": 2
            },
            "end": {
              "line": 728,
              "column": 31
            }
          },
          "metadata": {}
        },
        {
          "name": "textareaTemplate",
          "type": "object",
          "description": "template for `textarea` in shadow DOM",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 737,
              "column": 2
            },
            "end": {
              "line": 759,
              "column": 3
            }
          },
          "metadata": {}
        }
      ],
      "methods": [
        {
          "name": "render",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 284,
              "column": 2
            },
            "end": {
              "line": 286,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "updated",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 433,
              "column": 2
            },
            "end": {
              "line": 455,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProperties"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleIconClick",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 550,
              "column": 2
            },
            "end": {
              "line": 564,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "checked"
            },
            {
              "name": "option"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "getOptionIcon",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 565,
              "column": 2
            },
            "end": {
              "line": 573,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "checked"
            }
          ]
        },
        {
          "name": "getInput",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 574,
              "column": 2
            },
            "end": {
              "line": 622,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "option"
            }
          ]
        },
        {
          "name": "_fireValueChanged",
          "description": "fires when value changes",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 764,
              "column": 2
            },
            "end": {
              "line": 773,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleFieldChange",
          "description": "handles field changes by field type",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 779,
              "column": 2
            },
            "end": {
              "line": 785,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getAttributes",
          "description": "gets attributes that will only be set if they are defined",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 792,
              "column": 2
            },
            "end": {
              "line": 865,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type"
            }
          ]
        },
        {
          "name": "_getFieldsetValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 866,
              "column": 2
            },
            "end": {
              "line": 868,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_observeAndListen",
          "description": "listens for focusout\noverridden for fields in shadow DOM",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 876,
              "column": 2
            },
            "end": {
              "line": 882,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "init",
              "defaultValue": "true"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updateAttribute",
          "description": "updates field attributes based on field type",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 890,
              "column": 2
            },
            "end": {
              "line": 898,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updateField",
          "description": "updates field an type",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 904,
              "column": 2
            },
            "end": {
              "line": 914,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "./demo/field.html",
          "description": ""
        },
        {
          "url": "./demo/field.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 15,
          "column": 0
        },
        "end": {
          "line": 915,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "simple-fields-container",
      "name": "SimpleFieldsField"
    },
    {
      "description": "`simple-fields`\nUses JSON Schema to display a series of fields\n\n### Styling\n`<simple-fields>` provides following custom properties\nfor styling:\n\nCustom property | Description | Default\n----------------|-------------|--------\n`--simple-fields-margin` | vertical margin around container | 16px\n`--simple-fields-margin-small` | smaller vertical margin above field itself | 8px\n`--simple-fields-border-radus` | default border-radius | 2px\n`--simple-fields-color` | text color | black\n`--simple-fields-error-color` | error text color | #dd2c00\n`--simple-fields-accent-color` | accent text/underline color | #3f51b5\n`--simple-fields-border-color` | border-/underline color | #999\n`--simple-fields-border-color-light` | used for range tracks | #ccc\n`--simple-fields-faded-error-color` | used for range tracks | #ff997f\n\n#### Field text\nCustom property | Description | Default\n----------------|-------------|--------\n`--simple-fields-font-size` | font-size of field | 16px\n`--simple-fields-font-family` | font-size of field | sans-serif\n`--simple-fields-line-height` | line-height of field | 22px\n\n#### Detail text\nCustom property | Description | Default\n----------------|-------------|--------\n`--simple-fields-detail-font-size` | font-size of field details | 12px\n`--simple-fields-detail-font-family` | font-size of field details | sans-serif\n`--simple-fields-detail-line-height` | line-height of field details | 22px\n\n#### Disabled Fields\nCustom property | Description | Default\n----------------|-------------|--------\n`--simple-fields-disabled-color` | disabled text color | #999\n`--simple-fields-disabled-opacity` | opacity for disabled field | 0.7\n\n#### Radio Buttons and Checkboxes\nCustom property | Description | Default\n----------------|-------------|--------\n`--simple-fields-radio-option-display` | display label with field (flex) or above (block) | flex\n`--simple-fields-radio-option-flex-wrap` | allow radio options to wrap to next line | wrap\n\n### Configuring schemaConversion Property\nYou can customise elements from JSON schema conversion by setting `schemaConversion` property.\n```\ntype: {                                       //For properties in \"this.schema\", define elements based on a property's \"type\"\n  object: {                                   //Defines element used when property's \"type\" is an \"object\"\n    format: {                                 //Optional: define elements for \"object\" properties by \"format\"\n      \"tabs\": {                               //Defines element used for object properties when \"format\" is \"tabs\"\n        element: \"a11y-tabs\"                  //Element to create, eg. \"paper-input\", \"select\", \"simple-fields-array\", etc.\n        descriptionProperty: \"description\"    //Optional: element's property that sets its description, e.g. \"description\"\n        descriptionSlot: \"description\"        //Optional: element's slot that contains its description, e.g. \"description\"\n        errorProperty: \"error\"                //Optional: element's property that sets its error status, e.g. \"error\"\n        errorChangedProperty: \"error\"         //Optional: event element fires when error status changes, e.g. \"error-changed\"\n        errorMessageProperty: \"errorMessage\"  //Optional: element's property that sets its error message, e.g. \"errorMessage\"\n        errorMessageSlot: \"errorMessage\"      //Optional: element's slot that contains its error message, e.g. \"errorMessage\"\n        labelProperty: \"label\"                //Optional: element's property that sets its label, e.g. \"label\"\n        labelSlot: \"label\"                    //Optional: element's slot that contains its label, e.g. \"label\"\n        valueProperty: \"value\"                //Optional: element's property that gets its value, e.g. \"value\" or \"checked\"\n        setValueProperty: \"value\"             //Optional: element's property that sets its value, e.g. \"value\" or \"checked\" (default is same as valueProperty)\n        valueChangedProperty: \"value-changed\" //Optional: event element fires when value property changes, e.g. \"value-changed\" or \"click\"\n        valueSlot: \"\"                         //Optional: element's slot that's used to set its value, e.g. \"\"\n        description: \"\"                       //Optional: element that contains description, e.g. \"p\", \"span\", \"paper-tooltip\", etc.\n        child: {                              //Optional: child elements to be appended\n          element: \"a11y-tab\"                 //Optional: type of child element, eg. \"paper-input\", \"select\", \"simple-fields-array\", etc.\n          attributes: {                       //Optional: sets child element's attributes based on this.schemaConversion\n            disabled: true                    //Example: sets disabled to true  \n          } \n          properties: {                       //Optional: sets child element's attributes based on this.schema properties\n            icon: \"iconName\"                  //Example: sets child element's icon property to this.schema property's iconName \n          }, \n          slots: {                            //Optional: inserts schema properties in child element's slots\n            label: \"label\",                   //Example: places schema property's label into child element's label slot\n            \"\": \"description\"                 //Example: places schema property's description into child element's unnamed slot\n          } \n        },\n        attributes: {},\n        properties: {},\n        slots: {}\n      }\n    },\n    defaultSettings: {                        //Default element used for object properties\n      element: \"\"\n      label: \"\"\n      description: \"\"     \n      attributes: {}       \n      properties: {}       \n      slots: {}           \n    }\n  }\n}\n``` \n### Configuring fieldsConversion Property\nYou can customise fields to JSON schema conversion by setting `fieldsConversion` property.\n```\ndefaultSettings: {            //default JSON schema type if no type is matched\n  type: \"string\"              //sets JSON schema type to string\n},\ninputMethod: {                //for fields in \"this.fields\", define elements based on a property's \"inputMethod\"\n  colorpicker: {              //settings if inputMethod is color picker\n    defaultSettings: {        //default colorpicker settings\n      type: \"string\",         //sets JSON schema type to string\n      format: \"color\"         //sets JSON schema format to color\n    }\n  }\n}\n```",
      "summary": "",
      "path": "simple-fields.js",
      "properties": [
        {
          "name": "convertedSchema",
          "type": "?",
          "description": "fields converted to JSON schema =",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 228,
              "column": 2
            },
            "end": {
              "line": 237,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "schemaConversion",
          "type": "?",
          "description": "gets JSON schema to form element conversion object",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 244,
              "column": 2
            },
            "end": {
              "line": 577,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "fieldsConversion",
          "type": "?",
          "description": "gets fields array to JSON schema conversion object",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 584,
              "column": 2
            },
            "end": {
              "line": 741,
              "column": 3
            }
          },
          "metadata": {}
        }
      ],
      "methods": [
        {
          "name": "render",
          "description": "render function",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "updated",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 743,
              "column": 2
            },
            "end": {
              "line": 753,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProperties"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "setActiveTab",
          "description": "updates the active tabs object",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 760,
              "column": 2
            },
            "end": {
              "line": 766,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "tabId",
              "type": "string",
              "description": ", eg. 'settings.permisions.groups'"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "setActivePath",
          "description": "sets active tabs by path, eg. 'settings/permissions/groups'",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 774,
              "column": 2
            },
            "end": {
              "line": 781,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": ", eg. 'settings/permissions/groups'"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_convertField",
          "description": "matches schema property to fieldsConversion settings",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 791,
              "column": 2
            },
            "end": {
              "line": 808,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "field",
              "type": "object",
              "description": "fields array item"
            },
            {
              "name": "conversion",
              "type": "object",
              "defaultValue": "this.fieldsConversion",
              "description": "section of fieldsConverstion to search"
            },
            {
              "name": "settings",
              "type": "object",
              "defaultValue": "{}",
              "description": "closest current match's defaultSettings object"
            }
          ],
          "return": {
            "type": "object"
          }
        },
        {
          "name": "_fieldToSchema",
          "description": "converts fields array to schema properties",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 816,
              "column": 2
            },
            "end": {
              "line": 855,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "field",
              "type": "object",
              "description": "field object to convert"
            }
          ],
          "return": {
            "desc": "object schema properties"
          }
        },
        {
          "name": "fieldsToSchema",
          "description": "converts fields array to schema properties",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 863,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "fields",
              "type": "*",
              "description": "fields array to convert"
            }
          ],
          "return": {
            "desc": "object schema properties"
          }
        },
        {
          "name": "_handleActiveTabs",
          "description": "handles active tabs changes",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 879,
              "column": 2
            },
            "end": {
              "line": 888,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleActiveTab",
          "description": "updates the active tabs object",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 895,
              "column": 2
            },
            "end": {
              "line": 898,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "./demo/index.html",
          "description": ""
        },
        {
          "url": "./demo/schema.html",
          "description": "Schema"
        },
        {
          "url": "./demo/conditional.html",
          "description": "Conditional Logic"
        },
        {
          "url": "./demo/subschema.html",
          "description": "Subschemas"
        },
        {
          "url": "./demo/form.html",
          "description": "Form"
        },
        {
          "url": "./demo/index.html",
          "description": ""
        },
        {
          "url": "./demo/schema.html",
          "description": "Schema"
        },
        {
          "url": "./demo/conditional.html",
          "description": "Conditional Logic"
        },
        {
          "url": "./demo/subschema.html",
          "description": "Subschemas"
        },
        {
          "url": "./demo/form.html",
          "description": "Form"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 126,
          "column": 0
        },
        "end": {
          "line": 899,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "simple-fields-lite",
      "name": "SimpleFields"
    },
    {
      "description": "`simple-fields-form-lite`\nbinding and submission capabilities on top of simple-fields-lite",
      "summary": "",
      "path": "lib/simple-fields-form-lite.js",
      "properties": [
        {
          "name": "formFields",
          "type": "?",
          "description": "gets the simple-fields object",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 315,
              "column": 2
            },
            "end": {
              "line": 321,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "formElements",
          "type": "?",
          "description": "form elements by id",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 328,
              "column": 2
            },
            "end": {
              "line": 330,
              "column": 3
            }
          },
          "metadata": {}
        },
        {
          "name": "formElementsArray",
          "type": "?",
          "description": "list of form elements in order",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 337,
              "column": 2
            },
            "end": {
              "line": 339,
              "column": 3
            }
          },
          "metadata": {}
        }
      ],
      "methods": [
        {
          "name": "render",
          "description": "render function",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 26,
              "column": 2
            },
            "end": {
              "line": 45,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_valueChanged",
          "description": "updates the form value when a field changes",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 54,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "*",
              "description": "value-changed event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "setValue",
          "description": "allow setting value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 2
            },
            "end": {
              "line": 60,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "firstUpdated",
          "description": "first update hook; also implies default settings",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProperties"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "updated",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 2
            },
            "end": {
              "line": 96,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProperties"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_applyLoadedData",
          "description": "applies loaded datda to simple-fields-lite",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 2
            },
            "end": {
              "line": 107,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "loadData",
          "description": "load data from the end point",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 111,
              "column": 2
            },
            "end": {
              "line": 133,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "fetchData",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 2
            },
            "end": {
              "line": 162,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path"
            },
            {
              "name": "method"
            },
            {
              "name": "headers"
            },
            {
              "name": "body"
            }
          ]
        },
        {
          "name": "_setFieldProperties",
          "description": "allows constructor to be overridden",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 173,
              "column": 2
            },
            "end": {
              "line": 179,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_setFormProperties",
          "description": "allows constructor to be overridden",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 185,
              "column": 2
            },
            "end": {
              "line": 194,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "submit",
          "description": "Submit form values if we have an end point, otherwise return value\nof the fields as they currently exist.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 199,
              "column": 2
            },
            "end": {
              "line": 210,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "./demo/form-lite.html",
          "description": ""
        },
        {
          "url": "./demo/form-lite.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 349,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "simple-fields-lite",
      "name": "SimpleFieldsFormLite"
    },
    {
      "description": "`simple-fields-form`\nbinding and submission capabilities on top of simple-fields",
      "summary": "",
      "path": "lib/simple-fields-form.js",
      "properties": [
        {
          "name": "formFields",
          "type": "?",
          "description": "gets the simple-fields object",
          "privacy": "public",
          "sourceRange": {
            "file": "simple-fields-form-lite.js",
            "start": {
              "line": 315,
              "column": 2
            },
            "end": {
              "line": 321,
              "column": 3
            }
          },
          "metadata": {},
          "inheritedFrom": "SimpleFieldsFormLite"
        },
        {
          "name": "formElements",
          "type": "?",
          "description": "form elements by id",
          "privacy": "public",
          "sourceRange": {
            "file": "simple-fields-form-lite.js",
            "start": {
              "line": 328,
              "column": 2
            },
            "end": {
              "line": 330,
              "column": 3
            }
          },
          "metadata": {},
          "inheritedFrom": "SimpleFieldsFormLite"
        },
        {
          "name": "formElementsArray",
          "type": "?",
          "description": "list of form elements in order",
          "privacy": "public",
          "sourceRange": {
            "file": "simple-fields-form-lite.js",
            "start": {
              "line": 337,
              "column": 2
            },
            "end": {
              "line": 339,
              "column": 3
            }
          },
          "metadata": {},
          "inheritedFrom": "SimpleFieldsFormLite"
        },
        {
          "name": "defaultSchemaConversion",
          "type": "?",
          "description": "gets default schemaConversion so parts of it can be overridden easily",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 83,
              "column": 2
            },
            "end": {
              "line": 85,
              "column": 3
            }
          },
          "metadata": {}
        }
      ],
      "methods": [
        {
          "name": "render",
          "description": "render function",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 16,
              "column": 2
            },
            "end": {
              "line": 36,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_valueChanged",
          "description": "updates the form value when a field changes",
          "privacy": "protected",
          "sourceRange": {
            "file": "simple-fields-form-lite.js",
            "start": {
              "line": 52,
              "column": 2
            },
            "end": {
              "line": 54,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "*",
              "description": "value-changed event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "SimpleFieldsFormLite"
        },
        {
          "name": "setValue",
          "description": "allow setting value",
          "privacy": "public",
          "sourceRange": {
            "file": "simple-fields-form-lite.js",
            "start": {
              "line": 58,
              "column": 2
            },
            "end": {
              "line": 60,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "SimpleFieldsFormLite"
        },
        {
          "name": "firstUpdated",
          "description": "first update hook; also implies default settings",
          "privacy": "public",
          "sourceRange": {
            "file": "simple-fields-form-lite.js",
            "start": {
              "line": 64,
              "column": 2
            },
            "end": {
              "line": 71,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProperties"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "SimpleFieldsFormLite"
        },
        {
          "name": "updated",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "simple-fields-form-lite.js",
            "start": {
              "line": 72,
              "column": 2
            },
            "end": {
              "line": 96,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProperties"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "SimpleFieldsFormLite"
        },
        {
          "name": "_applyLoadedData",
          "description": "applies loaded datda to simple-fields-lite",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 2
            },
            "end": {
              "line": 49,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "loadData",
          "description": "load data from the end point",
          "privacy": "public",
          "sourceRange": {
            "file": "simple-fields-form-lite.js",
            "start": {
              "line": 111,
              "column": 2
            },
            "end": {
              "line": 133,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "SimpleFieldsFormLite"
        },
        {
          "name": "fetchData",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "simple-fields-form-lite.js",
            "start": {
              "line": 134,
              "column": 2
            },
            "end": {
              "line": 162,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path"
            },
            {
              "name": "method"
            },
            {
              "name": "headers"
            },
            {
              "name": "body"
            }
          ],
          "inheritedFrom": "SimpleFieldsFormLite"
        },
        {
          "name": "_setFieldProperties",
          "description": "allows constructor to be overridden",
          "privacy": "protected",
          "sourceRange": {
            "file": "simple-fields-form-lite.js",
            "start": {
              "line": 173,
              "column": 2
            },
            "end": {
              "line": 179,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "SimpleFieldsFormLite"
        },
        {
          "name": "_setFormProperties",
          "description": "allows constructor to be overridden",
          "privacy": "protected",
          "sourceRange": {
            "file": "simple-fields-form-lite.js",
            "start": {
              "line": 185,
              "column": 2
            },
            "end": {
              "line": 194,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "SimpleFieldsFormLite"
        },
        {
          "name": "submit",
          "description": "Submit form values if we have an end point, otherwise return value\nof the fields as they currently exist.",
          "privacy": "public",
          "sourceRange": {
            "file": "simple-fields-form-lite.js",
            "start": {
              "line": 199,
              "column": 2
            },
            "end": {
              "line": 210,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "SimpleFieldsFormLite"
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "./demo/form.html",
          "description": ""
        },
        {
          "url": "./demo/form.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 11,
          "column": 0
        },
        "end": {
          "line": 86,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "SimpleFieldsFormLite",
      "name": "SimpleFieldsForm"
    }
  ]
}
